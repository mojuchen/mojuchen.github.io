<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>优雅的科学上网</title>
    <url>/post/23204.html</url>
    <content><![CDATA[<p>通过自定义 PAC 规则和 <a href="https://proxy-switchyomega.com/" target="_blank" rel="noopener">SwitchyOmega</a> 插件，优雅的科学上网。当然首先你得自己找到科学上网的方法，然后才能讨论如何优雅。</p>
<p><img src="http://markdown.yeek.top/20200117220553.png" alt=""></p>
<a id="more"></a>



<p>酸酸乳 的作者已经很久没有更新了，其内置的 <code>PAC规则</code> 已经不能很好的与某墙同步了。</p>
<p>具体的体现就是使用 PAC规则 的时候，GitHub 的图片和raw代码经常 <code>404</code> 。</p>
<p><img src="http://markdown.yeek.top/20200117221613.png" alt=""></p>
<p><img src="http://markdown.yeek.top/20200117221808.png" alt=""></p>
<p>因此，就需要我们自己 <strong>手动设置 PAC规则</strong> 了</p>
<p>主要参考的是 某中文网 的设置（访问需要梯子）</p>
<blockquote>
<p><a href="https://ssr.tools/495" target="_blank" rel="noopener">各平台PAC/ACL规则文件设置</a></p>
</blockquote>
<p>如果有打不可以的页面或者无法获取等情况，说明 <strong>需要梯子</strong> 。</p>
<h1 id="Windows-下的配置"><a href="#Windows-下的配置" class="headerlink" title="Windows 下的配置"></a>Windows 下的配置</h1><p> <kbd>右键->另存为</kbd> 下载规则，改名为 <code>pac.txt</code> 替换掉到 <code>酸酸乳</code> 安装目录中的 <code>pac.txt</code> 。</p>
<p>或者直接 <kbd>复制粘贴</kbd> 到酸酸乳安装目录中的  <code>pac.txt</code> 中。</p>
<p>选择代理模式为PAC模式。</p>
<p><a href="https://raw.githubusercontent.com/petronny/gfwlist2pac/master/gfwlist.pac" target="_blank" rel="noopener">xxxlist.pac</a></p>
<p><img src="http://markdown.yeek.top/20200117222841.png" alt=""></p>
<blockquote>
<p><a href="https://github.com/petronny/gfwlist2pac" target="_blank" rel="noopener">支持更新规则的项目</a></p>
</blockquote>
<h1 id="Android-下的配置"><a href="#Android-下的配置" class="headerlink" title="Android 下的配置"></a>Android 下的配置</h1><p>在下面这个项目中挑选适合你的规则，接着在客户端的 <code>路由</code> 中选择 <code>自定义ACL文件</code> ，在弹出的窗口中填入 <code>规则连接</code> 即可。</p>
<p><a href="https://github.com/ACL4SSR/ACL4SSR" target="_blank" rel="noopener">ACL4SSR</a></p>
<p><img src="http://markdown.yeek.top/20200117224514.jpg" alt=""></p>
<p><img src="http://markdown.yeek.top/20200117224524.jpg" alt=""></p>
<h1 id="Chrome-和-FireFox-下的配置"><a href="#Chrome-和-FireFox-下的配置" class="headerlink" title="Chrome 和 FireFox 下的配置"></a>Chrome 和 FireFox 下的配置</h1><p>推荐使用 <a href="https://proxy-switchyomega.com/" target="_blank" rel="noopener">SwitchyOmega</a> 这个插件，如果遇到 PAC 没有及时更新的域名，可以字节添加规则</p>
]]></content>
      <categories>
        <category>mix</category>
      </categories>
      <tags>
        <tag>科学上网</tag>
        <tag>SwitchyOmega</tag>
      </tags>
  </entry>
  <entry>
    <title>攻防世界 WEB upload1</title>
    <url>/post/17040.html</url>
    <content><![CDATA[<h1 id="0x01-题目描述"><a href="#0x01-题目描述" class="headerlink" title="0x01 - 题目描述"></a>0x01 - 题目描述</h1><p><img src="http://markdown.yeek.top/20200117152226.png" alt=""></p>
<a id="more"></a>

<h1 id="0x02-解题过程"><a href="#0x02-解题过程" class="headerlink" title="0x02 - 解题过程"></a>0x02 - 解题过程</h1><p>打开页面，只有一个上传模块</p>
<p><img src="http://markdown.yeek.top/20200117152444.png" alt=""></p>
<p>既然题目是 <strong>uplaod1</strong> 那就可以试一下上传一句话木马。</p>
<p><img src="http://markdown.yeek.top/20200117161249.png" alt=""></p>
<p>果然有拦截，上传按钮不可用了。</p>
<p><img src="http://markdown.yeek.top/20200117152545.png" alt="上传提示"></p>
<p><img src="http://markdown.yeek.top/20200117155007.png" alt=""></p>
<p>分析 js 代码，是把按钮给 <code>disable</code> 了。</p>
<p><img src="http://markdown.yeek.top/20200117155400.png" alt=""></p>
<p>那很简单，在 <code>html</code> 里吧 <code>disable</code> 删掉就可以继续上传了</p>
<p><img src="http://markdown.yeek.top/20200117155937.png" alt=""></p>
<p><img src="http://markdown.yeek.top/20200117160702.png" alt=""></p>
<p>得到上传的地址。访问地址没有404，说明正常打开了。</p>
<p><img src="http://markdown.yeek.top/20200117160924.png" alt=""></p>
<p>使用中国菜刀连接。</p>
<p><img src="http://markdown.yeek.top/20200117161215.png" alt=""></p>
<p>能访问服务器文件。开始找flag</p>
<p><img src="http://markdown.yeek.top/20200117161357.png" alt=""></p>
<p>一般不是在服务器的根目录就是在网站的根目录，这道题是后者</p>
<p><img src="http://markdown.yeek.top/20200117161513.png" alt=""></p>
<h1 id="0x03-技术总结"><a href="#0x03-技术总结" class="headerlink" title="0x03 - 技术总结"></a>0x03 - 技术总结</h1><ul>
<li>注意看网页的源码</li>
</ul>
]]></content>
      <categories>
        <category>ctf</category>
        <category>web</category>
      </categories>
      <tags>
        <tag>信息安全</tag>
        <tag>ctf-web-入门</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-next-配置</title>
    <url>/post/32411.html</url>
    <content><![CDATA[<p>简单的介绍一下我是如何配置本博客的</p>
<a id="more"></a>

<h1 id="博客设置"><a href="#博客设置" class="headerlink" title="博客设置"></a>博客设置</h1><p>是<span class="label danger">根目录</span>下的 <code>_config.yml</code> 文件</p>
<h2 id="站点信息"><a href="#站点信息" class="headerlink" title="站点信息"></a>站点信息</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">moreant's</span> <span class="string">Blog</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">学习即输入输出</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">别教了，我学不动了</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">前端</span> <span class="string">后端</span> <span class="string">运维</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">莫居尘</span> <span class="string">Moreant</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">"Asia/Shanghai"</span></span><br></pre></td></tr></table></figure>



<h2 id="永久链接"><a href="#永久链接" class="headerlink" title="永久链接"></a>永久链接</h2><p>参见 <a href="/post/52295.html">URL的美化</a></p>
<h2 id="上传至-GitHub"><a href="#上传至-GitHub" class="headerlink" title="上传至 GitHub"></a>上传至 GitHub</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span> </span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:moreant/moreant.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>





<h1 id="主题设置"><a href="#主题设置" class="headerlink" title="主题设置"></a>主题设置</h1><p>我使用的是 <a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">next</a> 主题，注意别下载到旧版了。</p>
<p>详细配置里面的注释很详细，请善用 Google 翻译</p>
]]></content>
      <categories>
        <category>mix</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>Web前端中级证4道操作题模拟真题解析</title>
    <url>/post/54367.html</url>
    <content><![CDATA[<p>==12月21日更新==</p>
<p>考完了，发现这题目比模拟题简单一百万倍。我实操题就空了一个空。</p>
<p>==原文==</p>
<p>这个证的含金量是真的高，高到现在的我不配考到这个证，没有文档真做不出来大部分的。</p>
<p>不过代码的质量、可读性都很高，没有注释也可以看得懂，不像我，写了注释也读不懂</p>
<div class="note danger">
            <p><strong>注意！</strong>不保证与真实的题目有关系。</p>
          </div>

<a id="more"></a>

<br>

<p>本文随缘更新，题目来源是 2019-12-18 早上的  <span class="label info">模拟考试</span></p>
<div class="note info">
            <p>四道题目源码+题目截图的打包的 <a href="http://download.yeek.top/webExamFourQuestions.zip" target="_blank" rel="noopener"><strong>下载</strong></a> </p>
          </div>



<h2 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><img src="http://markdown.yeek.top/20191219015217.png" alt=""></p>
<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>目录如下图：</p>
<p><img src="http://markdown.yeek.top/20191219022040.png" alt=""></p>
<p><strong>index.html :</strong> </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>TODO List<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#todoList</span> &#123;</span></span><br><span class="line">            list-style-type: none;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"todoList"</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> todoList = <span class="built_in">document</span>.querySelector(<span class="string">'#todoList'</span>);</span></span><br><span class="line"><span class="javascript">    fetch(<span class="string">'todo.php'</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        if (res.(1) === 200) &#123;   <span class="comment">&lt;!-- 此行中请填写第（1）空 --&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            res.(2)().then((list) =&gt; &#123;   <span class="comment">&lt;!-- 此行中请填写第（2）空 --&gt;</span></span></span></span><br><span class="line"><span class="javascript">                list.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> checkbox = <span class="built_in">document</span>.createElement(<span class="string">'input'</span>);</span></span><br><span class="line"><span class="actionscript">                    checkbox.type = <span class="string">'checkbox'</span>;</span></span><br><span class="line"><span class="actionscript">                    checkbox.id = <span class="string">"todo_"</span> + item.id;</span></span><br><span class="line">                    if (item.completed) &#123;</span><br><span class="line"><span class="actionscript">                        checkbox.checked = <span class="literal">true</span>; <span class="comment">/* 当完成时将checkbox勾选上 */</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">                    li.appendChild(checkbox);</span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> label = <span class="built_in">document</span>.createElement(<span class="string">'label'</span>);</span></span><br><span class="line">                    label.innerText = item.text;</span><br><span class="line"><span class="actionscript">                    label.htmlFor = <span class="string">"todo_"</span> + item.id;</span></span><br><span class="line">                    li.appendChild(label);</span><br><span class="line">                    todoList.appendChild(li);</span><br><span class="line"><span class="actionscript">                    checkbox.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> <span class="params">(e)</span> </span>&#123;</span></span><br><span class="line">                        e.preventDefault();</span><br><span class="line"><span class="javascript">                        <span class="keyword">let</span> newStatus = <span class="keyword">this</span>.checked ? <span class="number">1</span> : <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">let</span> data = <span class="keyword">new</span> (<span class="number">3</span>)();   <span class="xml"><span class="comment">&lt;!-- 此行中请填写第（3）空 --&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                        data.append('(4)', (5));//设置提交的参数     <span class="comment">&lt;!-- 此行中请填写第（4）和第（5）空 --&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                        fetch('todo.php(6)' + item.id, &#123;   <span class="comment">&lt;!-- 此行中请填写第（6）空 --&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                            '(7)': data,    <span class="comment">&lt;!-- 此行中请填写第（7）空 --&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                            '(8)': '(9)'    <span class="comment">&lt;!-- 此行中请填写第（8）和第（9）空 --&gt;</span></span></span></span><br><span class="line"><span class="javascript">                        &#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span><br><span class="line">                            if (res.status === 200) &#123;</span><br><span class="line"><span class="javascript">                                res.json().then(<span class="function">(<span class="params">json</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">                                    if (json.(10)) &#123;   <span class="comment">&lt;!-- 此行中请填写第（10）空 --&gt;</span></span></span></span><br><span class="line">                                        alert(json.error)</span><br><span class="line"><span class="actionscript">                                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line">                                        checkbox.checked = !!newStatus;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;)</span><br><span class="line"><span class="actionscript">                            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">                                alert(<span class="string">'操作异常'</span>)</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>list.json :</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[&#123;<span class="attr">"text"</span>:<span class="string">"hello"</span>,<span class="attr">"completed"</span>:<span class="literal">true</span>,<span class="attr">"id"</span>:<span class="number">1</span>&#125;,&#123;<span class="attr">"text"</span>:<span class="string">"world"</span>,<span class="attr">"completed"</span>:<span class="literal">false</span>,<span class="attr">"id"</span>:<span class="number">2</span>&#125;]</span><br></pre></td></tr></table></figure>



<p><strong>todo.php :</strong> </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'Content-Type:application/json'</span>);</span><br><span class="line">$dataFile = <span class="keyword">__DIR__</span> . <span class="string">'/list.json'</span>;</span><br><span class="line"><span class="keyword">switch</span> ($_SERVER[<span class="string">'REQUEST_METHOD'</span>]) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'GET'</span>:</span><br><span class="line">        <span class="keyword">echo</span> file_get_contents($dataFile);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'POST'</span>:</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>($_GET[<span class="string">'id'</span>])) &#123;</span><br><span class="line">            <span class="keyword">echo</span> json_encode([<span class="string">'errno'</span> =&gt; <span class="number">10001</span>, <span class="string">'error'</span> =&gt; <span class="string">'no id'</span>]);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $id = intval($_GET[<span class="string">'id'</span>]);</span><br><span class="line">        $list = json_decode(file_get_contents($dataFile), <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">foreach</span> ($list <span class="keyword">as</span> &amp;$item) &#123;</span><br><span class="line">            <span class="keyword">if</span> ($item[<span class="string">'id'</span>] === $id) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="keyword">isset</span>($_POST[<span class="string">'status'</span>]))&#123;</span><br><span class="line">                    <span class="keyword">echo</span> json_encode([<span class="string">'errno'</span> =&gt; <span class="number">10002</span>, <span class="string">'error'</span> =&gt; <span class="string">'no status'</span>]);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                $item[<span class="string">'completed'</span>] = boolval($_POST[<span class="string">'status'</span>]);</span><br><span class="line">                file_put_contents($dataFile, json_encode($list));</span><br><span class="line">                <span class="keyword">echo</span> json_encode([<span class="string">'errno'</span> =&gt; <span class="number">0</span>, <span class="string">'error'</span> =&gt; <span class="string">'ok'</span>]);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">unset</span>($item);</span><br><span class="line">        <span class="keyword">echo</span> json_encode([<span class="string">'errno'</span> =&gt; <span class="number">10003</span>, <span class="string">'error'</span> =&gt; <span class="string">'not found'</span>]);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">echo</span> json_encode([<span class="string">'errno'</span> =&gt; <span class="number">20001</span>, <span class="string">'error'</span> =&gt; <span class="string">'unsupported method'</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><blockquote>
<p><a href="https://blog.csdn.net/zyj362633491/article/details/84997208" target="_blank" rel="noopener">JavaScript fetch 快速入门</a></p>
<p><a href="https://blog.csdn.net/dylan_zeng92/article/details/76559922" target="_blank" rel="noopener">ES6中fetch的post的前后端node传参的问题</a></p>
<p><a href="https://www.jianshu.com/p/e438fb2238cf" target="_blank" rel="noopener">FormData使用方法详解</a></p>
</blockquote>
<h3 id="答案及解析"><a href="#答案及解析" class="headerlink" title="答案及解析"></a>答案及解析</h3><p>我是真没想到考证的 <code>ajax</code> 用的既不是 <code>XMLHTTPRequest</code> 也不是 <code>JQuery</code> 的 <code>$.ajax</code> 而是ES6中的 <code>Ferch</code></p>
<h4 id="第-1、2-空"><a href="#第-1、2-空" class="headerlink" title="第 1、2 空"></a>第 1、2 空</h4><p>可以从42、43行中找到答案</p>
<p><img src="http://markdown.yeek.top/20191219022618.png" alt=""></p>
<p><img src="http://markdown.yeek.top/20191219022655.png" alt=""></p>
<p>直接就是点击复选框里面的事件了，先注释掉这个点击事件，看看1、2空有没有填对。</p>
<p><img src="http://markdown.yeek.top/20191219022950.png" alt=""></p>
<p>可以从 <strong>todo.php</strong> 里请求到json数据，页面显示也正常。</p>
<p><img src="http://markdown.yeek.top/20191219023020.png" alt=""></p>
<h4 id="第-6-空"><a href="#第-6-空" class="headerlink" title="第 6 空"></a>第 6 空</h4><p>回到<strong>3空</strong>，不知道要 <code>new</code> 什么，后面更不知道要填什么，总之可以看出是跟后台有<strong>数据交互</strong>就对了，那就去 <strong>todo.php</strong> 里找答案。</p>
<p><img src="http://markdown.yeek.top/20191219024139.png" alt=""></p>
<p>通过分析可知，修改列表需要用 <code>POST</code> 类型，同时还要用 <code>GET</code> 类型传入 <strong><code>id</code></strong> 这个值</p>
<p><img src="http://markdown.yeek.top/20191219023856.png" alt=""></p>
<p>用 <code>GET</code> 传入的参数肯定是在 <code>URL</code> 里的，并且<strong>6空</strong>后面还有 <code>item.id</code> 来拼接，所以<strong>6空</strong>的答案是 <strong>?id=</strong></p>
<p><img src="http://markdown.yeek.top/20191219024101.png" alt=""></p>
<p><img src="http://markdown.yeek.top/20191219024732.png" alt=""></p>
<h4 id="第-7、8、9-空"><a href="#第-7、8、9-空" class="headerlink" title="第 7、8、9 空"></a>第 7、8、9 空</h4><p>前面也说了，点击事件里的 <code>fetch</code> 是 <code>POST类型</code> ，根据参考资料需要用传入  <code>method: &#39;POST&#39;</code>  来指定是POST 类型</p>
<p><img src="http://markdown.yeek.top/20191219025054.png" alt=""></p>
<p>显而易见不可能是7空，因为后面有 <code>data</code>，所以只能填入<strong>8、9空</strong>。你问我为什么参考（其他地方）的 <code>method</code> 没有用单引号括起来，题目里的却括起来了？咱不知道，也不敢问。</p>
<p><img src="http://markdown.yeek.top/20191219025207.png" alt=""></p>
<p>那么<strong>7空</strong>毫无疑问就是 <strong>body</strong> 了</p>
<p><img src="http://markdown.yeek.top/20191219030147.png" alt=""></p>
<h4 id="第-4、5-空"><a href="#第-4、5-空" class="headerlink" title="第 4、5 空"></a>第 4、5 空</h4><p>在 <strong>index.html</strong> 里又没有思路了，接着看 <strong>todo.php</strong> ，传入 <code>id</code> 之后接着干了什么。</p>
<p>分析可知，POST传入的参数名是 <code>status</code></p>
<p><img src="http://markdown.yeek.top/20191219030515.png" alt=""></p>
<p>回到 <strong>index.html</strong> 里，第37行里题目给的注释是：<strong>设置提交的参数</strong>。并且看到第35行将<strong>选中情况</strong>赋值给了常量 <code>newStatus</code>。</p>
<p><img src="http://markdown.yeek.top/20191219030741.png" alt=""></p>
<p>可以大胆猜测4、5空是 <strong>status</strong> 和 <strong>newStatus</strong>，如果不信，可以接着往下看。</p>
<p><img src="http://markdown.yeek.top/20191219031027.png" alt=""></p>
<h4 id="第-3-空"><a href="#第-3-空" class="headerlink" title="第 3 空"></a>第 3 空</h4><p>到现在还是不知道<strong>3空</strong>是什么，总之是用 <code>append方法</code> 添加数据的。实在不行，搜百度符合条件的就只有 <code>FormData</code> 了（具体用法见第三条参考链接）</p>
<p><img src="http://markdown.yeek.top/20191219032447.png" alt=""></p>
<p>所以<strong>3空</strong>应该填的是 <strong>FormData</strong></p>
<p><img src="http://markdown.yeek.top/20191219032525.png" alt=""></p>
<p><img src="http://markdown.yeek.top/20191219032541.png" alt=""></p>
<h4 id="第-10-空"><a href="#第-10-空" class="headerlink" title="第 10 空"></a>第 10 空</h4><p>10空根据下面那行可以判断出填的应该是 <strong>error</strong>  ，如果有 <code>error(错误信息)</code> 就用 <code>alert方法</code> 弹出错误信息。</p>
<p><img src="http://markdown.yeek.top/20191219034348.png" alt=""></p>
<p><img src="http://markdown.yeek.top/20191219034518.png" alt=""></p>
<p>至此，第一题解析完</p>
<h2 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h2><p>想查看题目和源码建议到本文顶部的下载中下载查看。</p>
<p>当时忘记保存数据库文件了，所以复原不了环境。但是问题不大此题与数据库没半毛钱关系。</p>
<p>或者是有其他问题吧</p>
<p><img src="http://markdown.yeek.top/20191219095951.png" alt=""></p>
<h3 id="参考链接-1"><a href="#参考链接-1" class="headerlink" title="参考链接"></a>参考链接</h3><blockquote>
<p>1 空 <a href="https://learnku.com/docs/laravel/5.7/installation/2242#52027b" target="_blank" rel="noopener">通过 Composer 创建项目</a></p>
<p>2、3、4 空 <a href="https://learnku.com/docs/laravel/5.7/eloquent/2294#be7dce" target="_blank" rel="noopener">Model</a></p>
<p>5、6 <a href="https://learnku.com/docs/laravel/5.7/eloquent/2294#be7dce" target="_blank" rel="noopener">路由</a></p>
<p>7、8  <a href="https://learnku.com/docs/laravel/5.7/eloquent/2294#be7dce" target="_blank" rel="noopener">表单验证</a> </p>
<p>9、10 空 <a href="https://learnku.com/docs/laravel/5.7/blade/2265" target="_blank" rel="noopener">Blade 模板</a></p>
</blockquote>
<h3 id="答案及解析-1"><a href="#答案及解析-1" class="headerlink" title="答案及解析"></a>答案及解析</h3><p>考的都是记忆力，就不多解析了。</p>
<h4 id="第-1-空"><a href="#第-1-空" class="headerlink" title="第 1 空"></a>第 1 空</h4><p><strong>create-project</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">【问题1】基于Laravel框架，回答下列问题，填写（1）至（4）。</span><br><span class="line"></span><br><span class="line">1、包管理工具</span><br><span class="line">安装Laravel框架，需要使用Composer 工具：通过命令“composer （1） laravel&#x2F;laravel --prefer-dist message”创建message工程。</span><br></pre></td></tr></table></figure>





<h4 id="第-2、3、4-空"><a href="#第-2、3、4-空" class="headerlink" title="第 2、3、4 空"></a>第 2、3、4 空</h4><p><strong>make:model</strong> 、 <strong>messages</strong> 、 <strong>table</strong></p>
<p><img src="http://markdown.yeek.top/20191219090330.png" alt=""></p>
<h4 id="第-5、6-空"><a href="#第-5、6-空" class="headerlink" title="第 5、6 空"></a>第 5、6 空</h4><p>第 5 空是因为有前缀，并且里面还有个‘add‘，第 6 空是因为直接打开不是 post 方法</p>
<p><strong>E</strong> 、 <strong>F</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">【问题2】分析项目路由，回答下列问题，填写（5）至（6）。</span><br><span class="line"></span><br><span class="line">在浏览器中输入网址，访问留言板页面，用户填写留言内容后，点击“提交”按钮，通过POST方式提交表单，在路由文件web.php中，路由配置如下：</span><br><span class="line">&lt;?php</span><br><span class="line">&#x2F;&#x2F;留言板首页</span><br><span class="line">Route::get(&#39;&#x2F;&#39;, &quot;IndexController@index&quot;);</span><br><span class="line">&#x2F;&#x2F;提交留言</span><br><span class="line">Route::prefix(&#39;message&#39;)-&gt;group(function ($app)&#123;</span><br><span class="line">    $app-&gt;post(&#39;add&#39;,&#39;IndexController@add&#39;);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">项目发布在本机上，本机地址为localhost，根据web.php文件中定义的路由信息，当输入下列访问地址时，分析路由情况，选择相应A至F内容，填写（5）至（6）。</span><br></pre></td></tr></table></figure>



<p><img src="http://markdown.yeek.top/20191219091052.png" alt=""></p>
<h4 id="第-7、8-空"><a href="#第-7、8-空" class="headerlink" title="第 7、8 空"></a>第 7、8 空</h4><p><strong>vaildata</strong> 、<strong>max</strong></p>
<p><img src="http://markdown.yeek.top/20191219093507.png" alt=""></p>
<p>IndexController.php：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Message</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $list = Message::all();</span><br><span class="line">        <span class="keyword">return</span> view(<span class="string">'index'</span>, [<span class="string">'list'</span> =&gt; $list]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(Request $request)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $request-&gt;(<span class="number">7</span>)([     <span class="comment">/* 在此行中填写第（7）空 */</span></span><br><span class="line">            <span class="string">'name'</span>=&gt;<span class="string">'required|(8):16'</span>,    <span class="comment">/* 在此行中填写第（8）空 */</span></span><br><span class="line">            <span class="string">'content'</span>=&gt;<span class="string">'required'</span></span><br><span class="line">        ]);</span><br><span class="line">        $content = $request-&gt;get(<span class="string">'content'</span>,<span class="string">''</span>);</span><br><span class="line">        $name = $request-&gt;get(<span class="string">'name'</span>,<span class="string">''</span>);</span><br><span class="line">        $todo = <span class="keyword">new</span> Message();</span><br><span class="line">        $todo-&gt;fill([<span class="string">'name'</span>=&gt;$name,<span class="string">'content'</span>=&gt;$content]);</span><br><span class="line">        $todo-&gt;save();</span><br><span class="line">        <span class="keyword">return</span> back();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="第-9、10空"><a href="#第-9、10空" class="headerlink" title="第 9、10空"></a>第 9、10空</h4><p><strong>@yield</strong> 、<strong>$loop-&gt;last</strong> </p>
<p><img src="http://markdown.yeek.top/20191219093936.png" alt=""></p>
<p>layout.balde.php:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Message&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        time &#123;color:<span class="comment">#666&#125;</span></span><br><span class="line">        .author &#123;color: <span class="comment">#333&#125;</span></span><br><span class="line">        fieldset &#123;margin-top:<span class="number">2</span>em&#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;header&gt;</span><br><span class="line">    &lt;h1&gt;Message board&lt;/h1&gt;</span><br><span class="line">&lt;/header&gt;</span><br><span class="line">&lt;div class="container"&gt;</span><br><span class="line">    (<span class="number">9</span>)(<span class="string">'content'</span>)    <span class="comment">/* 在此行中填写第（9）空 */</span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<p>index.balde.php:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@extends(<span class="string">"layout"</span>)</span><br><span class="line"></span><br><span class="line">@section(<span class="string">"content"</span>)</span><br><span class="line">    @<span class="keyword">foreach</span>($list <span class="keyword">as</span> $item)</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;time&gt;&#123;&#123;$item['created_at']&#125;&#125;&lt;/time&gt; &lt;span class="author"&gt;&#123;&#123;$item['name']&#125;&#125;&lt;/span&gt;&lt;br&gt;</span><br><span class="line">            &lt;article&gt;&#123;&#123;$item[<span class="string">'content'</span>]&#125;&#125;&lt;/article&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 每条消息后面加一条分隔线，最后一条除外 --&gt;</span><br><span class="line">        @<span class="keyword">if</span>(!(<span class="number">10</span>)) &lt;hr&gt; @<span class="keyword">endif</span>    <span class="comment">/* 在此行中填写第（10）空 */</span></span><br><span class="line">    @<span class="keyword">endforeach</span></span><br><span class="line"></span><br><span class="line">    &lt;fieldset&gt;</span><br><span class="line">        &lt;legend&gt;<span class="keyword">New</span> message&lt;/legend&gt;</span><br><span class="line">        &lt;form method=<span class="string">"POST"</span> action=<span class="string">"/message/add"</span>&gt;</span><br><span class="line">            @csrf</span><br><span class="line">            &lt;p&gt;&lt;input type=<span class="string">"text"</span> placeholder=<span class="string">"Name"</span> name=<span class="string">"name"</span> required&gt;&lt;/p&gt;</span><br><span class="line">            &lt;p&gt;&lt;textarea type=<span class="string">"text"</span> placeholder=<span class="string">"Content"</span> name=<span class="string">"content"</span> required&gt;&lt;/textarea&gt;&lt;/p&gt;</span><br><span class="line">            &lt;p&gt;&lt;button type=<span class="string">"submit"</span>&gt;Submit&lt;/button&gt;&lt;/p&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">    &lt;/fieldset&gt;</span><br><span class="line">@endsection</span><br></pre></td></tr></table></figure>









<h2 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h2><h3 id="答案及解析-2"><a href="#答案及解析-2" class="headerlink" title="答案及解析"></a>答案及解析</h3><h4 id="第-1-空-1"><a href="#第-1-空-1" class="headerlink" title="第 1 空"></a>第 1 空</h4><p>可以在 meta 的补全里看到答案</p>
<p><img src="http://markdown.yeek.top/20191219101159.png" alt=""></p>
<p><img src="http://markdown.yeek.top/20191219101252.png" alt=""></p>
<h4 id="第-2-空"><a href="#第-2-空" class="headerlink" title="第 2 空"></a>第 2 空</h4><p><strong>flex-md-column</strong></p>
<p><img src="http://markdown.yeek.top/20191219101738.png" alt=""></p>
<h4 id="第-3-、4-空"><a href="#第-3-、4-空" class="headerlink" title="第 3 、4 空"></a>第 3 、4 空</h4><p>很明显是模态框的按钮链接</p>
<p><strong>modal</strong> 、 <strong>data-target</strong></p>
<p><img src="http://markdown.yeek.top/20191219103351.png" alt=""></p>
<h4 id="第-5-空"><a href="#第-5-空" class="headerlink" title="第 5 空"></a>第 5 空</h4><p><strong>实在不知道</strong> ，百度都搜不出来，看老师给的答案是</p>
<p><strong>modal-dialog-centered</strong></p>
<p><img src="http://markdown.yeek.top/20191219104203.png" alt=""></p>
<p>话外题，百度是真的菜，搜出来的都是3的，或者自己diy的。我用Google搜，第一个就是正确答案</p>
<p><img src="http://markdown.yeek.top/20191219215108.png" alt=""></p>
<p><img src="http://markdown.yeek.top/20191219220040.png" alt=""></p>
<h4 id="第-6、7、8"><a href="#第-6、7、8" class="headerlink" title="第 6、7、8"></a>第 6、7、8</h4><p>很明显是用了 flex 布局，根据参考链接可以知道是</p>
<p><strong>flex-direction、column、flex-grow</strong></p>
<p><img src="http://markdown.yeek.top/20191219110913.png" alt=""></p>
<h4 id="第-9-空"><a href="#第-9-空" class="headerlink" title="第 9 空"></a>第 9 空</h4><p><strong>linear-gradient</strong></p>
<p><img src="http://markdown.yeek.top/20191219104948.png" alt=""></p>
<h4 id="第-10-空-1"><a href="#第-10-空-1" class="headerlink" title="第 10 空"></a>第 10 空</h4><p>看 <code>todoForm</code> ，是 form标签 ，因此可知是处理提交事件</p>
<p><strong>submit</strong></p>
<p><img src="http://markdown.yeek.top/20191219111516.png" alt=""></p>
<p><img src="http://markdown.yeek.top/20191219220533.png" alt=""></p>
<h4 id="第-11、12-空"><a href="#第-11、12-空" class="headerlink" title="第 11、12 空"></a>第 11、12 空</h4><p><strong>val 、 trim</strong></p>
<p><img src="http://markdown.yeek.top/20191219220613.png" alt=""></p>
<h4 id="第-13-空"><a href="#第-13-空" class="headerlink" title="第 13 空"></a>第 13 空</h4><p><strong>append</strong></p>
<p><img src="http://markdown.yeek.top/20191219220633.png" alt=""></p>
<h4 id="第-14-空"><a href="#第-14-空" class="headerlink" title="第 14 空"></a>第 14 空</h4><p><strong>preventDefault</strong></p>
<p><img src="http://markdown.yeek.top/20191219114433.png" alt=""></p>
<h4 id="第-15-空"><a href="#第-15-空" class="headerlink" title="第 15 空"></a>第 15 空</h4><p><code>closest</code> 用的很有灵性</p>
<p><strong>:checked</strong></p>
<p><img src="http://markdown.yeek.top/20191219114342.png" alt=""></p>
<h2 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h2><h4 id="第-1、2-空-1"><a href="#第-1、2-空-1" class="headerlink" title="第 1、2 空"></a>第 1、2 空</h4><p><img src="http://markdown.yeek.top/20191220010309.png" alt=""></p>
<p>id肯定是主键和自增，这个可以不用背。直接到 phpmyadmin 里新建表，然后预览SQL语句就可以了</p>
<p><strong>PRIMARY KEY、AUTO_INCREMENT</strong></p>
<p><img src="http://markdown.yeek.top/20191219231942.png" alt=""></p>
<p><img src="http://markdown.yeek.top/20191219232417.png" alt=""></p>
<h4 id="第-3、4-空"><a href="#第-3、4-空" class="headerlink" title="第 3、4 空"></a>第 3、4 空</h4><p><img src="http://markdown.yeek.top/20191220010328.png" alt=""></p>
<p>mysqli是个连接数据库的对象</p>
<blockquote>
<p><a href="https://www.php.net/manual/zh/mysqli.construct.php" target="_blank" rel="noopener">mysqli::__construct</a></p>
</blockquote>
<p><strong>new、password</strong></p>
<p><img src="http://markdown.yeek.top/20191219232858.png" alt=""></p>
<h4 id="第-5、6-空-1"><a href="#第-5、6-空-1" class="headerlink" title="第 5、6 空"></a>第 5、6 空</h4><p><img src="http://markdown.yeek.top/20191220010531.png" alt=""></p>
<p>这两空就是白送分</p>
<p><strong>session_start()、$query</strong></p>
<p><img src="http://markdown.yeek.top/20191219234117.png" alt=""></p>
<h4 id="第-7、8、9-空-1"><a href="#第-7、8、9-空-1" class="headerlink" title="第 7、8、9 空"></a>第 7、8、9 空</h4><p><img src="http://markdown.yeek.top/20191220010602.png" alt=""></p>
<p>第 7 空是填标识符，因为默认是 <code>MYSQLI_BOTH</code> 而题目让你填一个，并且结合短标签里指定了 <code>id</code> 还好 <code>HbuildX</code> 里有补全提示，只要记住前面的 <code>MYSQLI</code> 就行了</p>
<p><strong>MYSQLI_ASSOC</strong></p>
<table>
<thead>
<tr>
<th align="left">标识符</th>
<th>返回结果</th>
</tr>
</thead>
<tbody><tr>
<td align="left">MYSQLI_ASSOC</td>
<td>关联数组</td>
</tr>
<tr>
<td align="left">MYSQLI_NUM</td>
<td>数字数组</td>
</tr>
<tr>
<td align="left">MYSQLI_BOTH</td>
<td>都返回(默认)</td>
</tr>
</tbody></table>
<p>第 11 行的编号后面的期刊名，和第 1、2 空创建<strong>表的字段名</strong>，第 8 空是</p>
<p><strong>$row[‘title’]</strong></p>
<p><img src="http://markdown.yeek.top/20191220004635.png" alt=""></p>
<p>最后要关闭数据库连接</p>
<p><strong>close()</strong></p>
<p><img src="http://markdown.yeek.top/20191220004926.png" alt=""></p>
<h4 id="第-10、11-空"><a href="#第-10、11-空" class="headerlink" title="第 10、11 空"></a>第 10、11 空</h4><p><img src="http://markdown.yeek.top/20191220010414.png" alt=""></p>
<p>两个送分题，<code>ACTION</code> 指定表单提交的地址， <code>onsubmit</code> 指定提交时处理的JavaScript方法，而这个页面就一个JavaScript方法</p>
<p><strong>postAdd.php、checkpost()</strong></p>
<p><img src="http://markdown.yeek.top/20191220005801.png" alt=""></p>
<h4 id="第-12、13、14-空"><a href="#第-12、13、14-空" class="headerlink" title="第 12、13、14 空"></a>第 12、13、14 空</h4><p><img src="http://markdown.yeek.top/20191220010628.png" alt=""></p>
<p>因为在第 5 行用了之前在 <strong>conn.php</strong> 创建的 <code>$mysqli</code> 所以是第 12 空是</p>
<p><strong>include ‘conn.php’</strong> 不唯一，使用 <code>include_once</code> / <code>requrire</code> / <code>requrire_once</code> 都可以</p>
<p>需要验证是否有 <code>$_POST</code> 参数，所以第 13 空是</p>
<p><strong>isset</strong></p>
<p>第 14 空明显是MySQL插入数据，所以是</p>
<p>*<em>INSERT INTO *</em></p>
<p><img src="http://markdown.yeek.top/20191220010841.png" alt=""></p>
<h4 id="第-15、16-空"><a href="#第-15、16-空" class="headerlink" title="第 15、16 空"></a>第 15、16 空</h4><p><img src="http://markdown.yeek.top/20191220011642.png" alt=""></p>
<p>在 <strong>list.php</strong> 里用 <code>get方法</code> 传入了 <code>id</code></p>
<p><img src="http://markdown.yeek.top/20191220012239.png" alt=""></p>
<p>所以第 15 空填入</p>
<p><strong>$_GET[‘id’]</strong></p>
<p>第 16 空根据 <code>name</code> 可以知道是与 <code>id</code> 有关，参照下面的短连接，所以填</p>
<p><strong>&lt;?=$rs[‘id’]&gt;</strong></p>
<p><img src="http://markdown.yeek.top/20191220011710.png" alt=""></p>
<h4 id="第-17、18-空"><a href="#第-17、18-空" class="headerlink" title="第 17、18 空"></a>第 17、18 空</h4><p><img src="http://markdown.yeek.top/20191220020049.png" alt=""></p>
<p>第 17 空明显是更新数据，所以是</p>
<p>*<em>UPDATA journal SET *</em></p>
<p>当第 4 行的 <code>query</code> 执行成功，会返回数据给 <code>$result</code> 因此第 18 空就是来判这个的</p>
<p><strong>$result</strong></p>
<p><img src="http://markdown.yeek.top/20191220020212.png" alt=""></p>
<h4 id="第-19-空"><a href="#第-19-空" class="headerlink" title="第 19 空"></a>第 19 空</h4><p>送分</p>
<p><strong>$id</strong></p>
<p><img src="http://markdown.yeek.top/20191220015933.png" alt=""></p>
<h4 id="第-20-空"><a href="#第-20-空" class="headerlink" title="第 20 空"></a>第 20 空</h4><p><img src="http://markdown.yeek.top/20191220020623.png" alt=""></p>
<p>又是一道送分题</p>
<p><strong>$url</strong></p>
<p><img src="http://markdown.yeek.top/20191220020710.png" alt=""></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>怎么说呢，可能是没有接触过 <code>ES6</code> 标准的 JavaScript，总体来说四道题第一道题是最难的，越往后面做题目越简单。</p>
<p>虽然有些题目的空没有见过是真的填不出来的，但是也有几个空是送分的，有的是需要结合上下文推断出来的。</p>
<p>对于我本人来说，这次考证非常悬，因为第一场理论的知识点我根本没有背过，就真的纯靠蒙了。唯一擅长的操作题又不给文档，也有大几率遇到不会的、没想到的方法。总而言之就是：</p>
<p><strong>备不足，尽人事、听天命。</strong></p>
<p>我的直觉是，明年再见！</p>
]]></content>
      <categories>
        <category>mix</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>考证</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx 添加 ssl证书</title>
    <url>/post/18457.html</url>
    <content><![CDATA[<p>简单的记一下在 <code>laradock</code> 中如何给 <code>Nginx</code> 添加 <strong>ssl证书</strong></p>
<p>在站点配置文件原有的80端口的 <code>server</code> 中加入以下内容，其中注意需要修改的是<strong>两个证书文件的地址</strong></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line"><span class="comment"># 注意文件的地址</span></span><br><span class="line"><span class="attribute">ssl_certificate</span> /etc/nginx/ssl/3243201_yeek.top.pem;</span><br><span class="line"><span class="attribute">ssl_certificate_key</span> /etc/nginx/ssl/3243201_yeek.top.key;</span><br><span class="line"><span class="attribute">ssl_session_timeout</span> <span class="number">5m</span>;</span><br><span class="line"><span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line"><span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line"><span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br></pre></td></tr></table></figure>



<p><img src="http://markdown.yeek.top/20191218232943.png" alt=""></p>
]]></content>
      <categories>
        <category>oam</category>
      </categories>
      <tags>
        <tag>运维</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 GitHub 头像加载错误</title>
    <url>/post/13173.html</url>
    <content><![CDATA[<p>update in 1-17：</p>
<p>现在有更好的解决办法了，那就是 <a href="chrome-extension://padekgcemlokbadohgkifijomclgjgif/options.html#!/about">SwitchyOmega</a></p>
<hr>

<p>最近发现 GitHub 的头像不能正常加载了，发现是404，直接就想到了是<strong>DNS污染</strong>。挂上全局酸酸乳，<code>ping</code> 加载失败的域名，得到 <code>ip</code> 地址，然后在 <code>host</code> 里加上就行了。</p>
<a id="more"></a>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># GitHub Start </span><br><span class="line">151.101.108.133 avatars1.githubusercontent.com</span><br><span class="line"># GitHub End</span><br></pre></td></tr></table></figure>



<p><img src="http://markdown.yeek.top/20191217235619.png" alt=""></p>
<p><img src="http://markdown.yeek.top/20191217235918.png" alt=""></p>
<p><img src="http://markdown.yeek.top/20191218000029.png" alt=""></p>
]]></content>
      <categories>
        <category>mix</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 修改主机名</title>
    <url>/post/65134.html</url>
    <content><![CDATA[<p><code>CentOS</code> 与其他 <code>Linux</code> 有些许不同，可以直接使用下面的指令设置主机名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname hostname</span><br></pre></td></tr></table></figure>

<p>但是传入的 hostname 中的大写字母会自动转化成小写字母，可以接着用下面这个指令来另外设置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hostnamectl --static set-hostname hostname</span><br></pre></td></tr></table></figure>

<p>一旦修改了静态主机名，<code>/etc/hostname</code> 将被自动更新。然而，<code>/etc/hosts</code> 不会更新以保存所做的修改，所以你每次在修改主机名后一定要手动更新<code>/etc/hosts</code>，之后再重启CentOS 7。否则系统再启动时会很慢。</p>
<blockquote>
<p>参考资料：<a href="https://www.jianshu.com/p/39d7000dfa47" target="_blank" rel="noopener">https://www.jianshu.com/p/39d7000dfa47</a></p>
</blockquote>
]]></content>
      <categories>
        <category>oam</category>
      </categories>
      <tags>
        <tag>运维</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 VS Code 远程连接服务器</title>
    <url>/post/19479.html</url>
    <content><![CDATA[<p>之前使用 <code>Vscode</code> 远程连接服务器之后，不仅<strong>编辑文件</strong>非常方便，看<strong>目录结构</strong>和<strong>下载文件</strong>都非常方便。最近换了电脑，发现没有记下相关的设置，所以现在记录一下。</p>
<a id="more"></a>



<h2 id="Vcode"><a href="#Vcode" class="headerlink" title="Vcode"></a>Vcode</h2><p>首先，<code>vscode</code> 需要安装相应的插件</p>
<p>Remote - SSH <a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-ssh" target="_blank" rel="noopener">介绍页面</a></p>
<p><img src="http://markdown.yeek.top/20191213004459.png" alt=""></p>
<p>在左侧栏会多出一个按钮，进入后点击设置按钮</p>
<p><img src="http://markdown.yeek.top/20191213004423.png" alt=""></p>
<p>这里选择用户名下的 <code>.ssh</code> 文件夹，因为这台电脑的其他用户不需要远程连接。</p>
<p><img src="http://markdown.yeek.top/20191213004555.png" alt=""></p>
<p>然后在 <code>config</code> 文件中填写远程连接的信息</p>
<p><img src="http://markdown.yeek.top/20191213010851.png" alt=""></p>
<table>
<thead>
<tr>
<th>Host</th>
<th>远程连接的名称</th>
</tr>
</thead>
<tbody><tr>
<td>HostName</td>
<td>远程连接的ip地址</td>
</tr>
<tr>
<td>User</td>
<td>远程连接的用户名</td>
</tr>
<tr>
<td>IdentityFile</td>
<td>远程连接的私钥路径(可选)</td>
</tr>
</tbody></table>
<p>之后点击这个进行远程连接了</p>
<p><img src="http://markdown.yeek.top/20191213012146.png" alt=""></p>
<p>连接成功后，就可以选择打开服务器上的文件夹了</p>
<p><img src="http://markdown.yeek.top/20191213012821.png" alt=""></p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><h3 id="缓存认证"><a href="#缓存认证" class="headerlink" title="缓存认证"></a>缓存认证</h3><p>第一次远程连接会询问你是否保存认证缓存，直接选第一个就行了</p>
<h3 id="连接报错"><a href="#连接报错" class="headerlink" title="连接报错"></a>连接报错</h3><p>我遇到了 Bad owner or permissions on C:\Users\Administrator/.ssh/config 报错的问题，解决办法就是将 <code>config</code> 文件的路径写在 <code>Remote-ssh</code> 插件的 <code>Config File</code> 属性里，然后<strong>重启vscode</strong></p>
<p><img src="http://markdown.yeek.top/20191213012014.png" alt=""></p>
<p>之后我还是遇到了这种问题，实在被烦到不行，在设置中换成了 <code>Git</code> 的 <code>ssh</code></p>
<p><img src="http://markdown.yeek.top/20191218004612.png" alt=""></p>
<h3 id="使用私钥登录"><a href="#使用私钥登录" class="headerlink" title="使用私钥登录"></a>使用私钥登录</h3><p>如果不指定私钥的地址，就需要在每次远程连接时输入密码，这是一件非常麻烦的事情。如何在服务器里开启私钥登录，可以去菜鸟教程里了解</p>
<div class="note info">
            <p>《<a href="https://www.runoob.com/w3cnote/set-ssh-login-key.html" target="_blank" rel="noopener">设置 SSH 通过密钥登录</a>》</p>
          </div>



]]></content>
      <categories>
        <category>oam</category>
      </categories>
      <tags>
        <tag>运维</tag>
        <tag>Vs Code</tag>
      </tags>
  </entry>
  <entry>
    <title>git 问题归纳</title>
    <url>/post/19251.html</url>
    <content><![CDATA[<p>收集 <code>git</code> 使用中遇到的各种奇奇怪怪的问题以及解决方案，请善用 <kbd>Ctrl+F</kbd> 搜索报错信息来查找。</p>
<a id="more"></a>



<h2 id="git-基础"><a href="#git-基础" class="headerlink" title="git 基础"></a>git 基础</h2><p><strong>git pull 冲突</strong></p>
<p>报错信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">error: Your local changes to the following files would be overwritten by merge</span><br></pre></td></tr></table></figure>



<ol>
<li><p>保留本地的方式修改 </p>
<p>通过git stash将工作区恢复到上次提交的内容，同时备份本地所做的修改，之后就可以正常git pull了，git pull完成后，执行git stash pop将之前本地做的修改应用到当前工作区。 </p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git stash</span><br><span class="line">git pull</span><br><span class="line">git stash pop</span><br></pre></td></tr></table></figure>



<ol start="2">
<li>远程强制覆盖本地</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git fetch --all &#x2F;&#x2F;只是下载代码到本地，不进行合并操作</span><br><span class="line">git reset --hard origin&#x2F;master  &#x2F;&#x2F;把HEAD指向最新下载的版本</span><br></pre></td></tr></table></figure>





<h2 id="服务器上的-git"><a href="#服务器上的-git" class="headerlink" title="服务器上的 git"></a>服务器上的 git</h2><p><strong>裸仓库中不允许混合重置</strong></p>
<p>报错内容如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mixed reset is not allowed in a bare repository</span><br></pre></td></tr></table></figure>

<p>解决方案</p>
<p>回到上一次</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git update-ref HEAD HEAD^</span><br></pre></td></tr></table></figure>

<p>回到某一次</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git update-ref refs&#x2F;heads&#x2F;branch-name branch-name^</span><br></pre></td></tr></table></figure>

<p>使用 sha1</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git update-ref refs&#x2F;heads&#x2F;branch-name a12d48e2</span><br></pre></td></tr></table></figure>

<div class="note info">
            <p>更多请参阅<a href="http://schacon.github.com/git/git-update-ref.html" target="_blank" rel="noopener">git-update-ref</a>命令的文档。 或者腾讯云的<a href="https://cloud.tencent.com/developer/section/1138785" target="_blank" rel="noopener">中文文档</a></p><p>方案来源地址 <a href="https://stackoverflow.com/questions/4624881/how-can-i-uncommit-the-last-commit-in-a-git-bare-repository" target="_blank" rel="noopener">栈越</a></p>
          </div>]]></content>
      <categories>
        <category>oam</category>
      </categories>
      <tags>
        <tag>运维</tag>
        <tag>笔记</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware 设置手动固定 ip</title>
    <url>/post/23562.html</url>
    <content><![CDATA[<p>有时候为了另一种方便，需要将虚拟机指定为<strong>手动固定</strong>的 ip 地址。</p>
<a id="more"></a>

<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>VMware版本：15.1.0</p>
<p>实体机系统：Windows 1903</p>
<p>虚拟机系统：Windows 7 </p>
<h2 id="VMware-设置"><a href="#VMware-设置" class="headerlink" title="VMware 设置"></a>VMware 设置</h2><p>首先打开 <strong>虚拟机网络编辑机</strong></p>
<p><img src="http://markdown.yeek.top/bolg/20191030/wlYrcC9BacsH.png?imageslim" alt="mark"></p>
<p>然后选择 <strong>NAT 模式</strong> ，子网 IP 自己定义</p>
<p><img src="http://markdown.yeek.top/bolg/20191030/npN7mSyuk7rt.png?imageslim" alt="mark"></p>
<p>进入 <strong>DHCP 设置</strong>，起始 IP 地址 和 结束 IP 地址根据上面的 子网 IP 进行配置</p>
<p><img src="http://markdown.yeek.top/bolg/20191030/mEiKS3lY8imx.png?imageslim" alt="mark"></p>
<h2 id="Windows-设置"><a href="#Windows-设置" class="headerlink" title="Windows 设置"></a>Windows 设置</h2><p>进入网络连接，如图设置</p>
<p><img src="http://markdown.yeek.top/bolg/20191030/U71bWtX64Hh3.jpg?imageslim" alt="mark"></p>
<h2 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h2><ul>
<li>如果虚拟机没有成功设置，请检查是否选择了 <strong>NAT 模式</strong></li>
<li>如果虚拟机始终是<strong>169.254.xxx.xxx</strong>，请检查是否与<strong>实体机</strong>或者其他<strong>虚拟机有ip地址冲突</strong></li>
</ul>
]]></content>
      <categories>
        <category>oam</category>
      </categories>
      <tags>
        <tag>运维</tag>
        <tag>VMware</tag>
      </tags>
  </entry>
  <entry>
    <title>消失于互联网</title>
    <url>/post/62693.html</url>
    <content><![CDATA[<p>万万没想到，我重装系统的时候忘记备份 <strong>博客</strong> 文件夹了。之前的18篇文章全部火葬场了。还好之前部署到 <code>GitHub Pages</code> 的文章还在，我只需要重新弄配置文件就可以了。不过难受的是我的第一篇碎碎念忘记备份了，而我又在 <code>hexo g -d</code>  之前 <strong>删掉了仓库</strong>。就在这一系列迷迷糊糊的操作后，我的那篇<strong>客居异乡 4 点钟</strong>写的碎碎念，就这样永远的消失在了互联网。</p>
<p>以后只能在看到这篇文章的时候才能回忆起那分崩离析的情绪了。</p>
<p><img src="http://markdown.yeek.top/bolg/20191030/dSBeCgC2f7lV.jpg?imageslim" alt="mark"></p>
<p>摄于写碎碎念时，台风登陆前夕</p>
]]></content>
      <categories>
        <category>broken</category>
      </categories>
      <tags>
        <tag>碎碎念</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Git 优雅的自动化更新 Laravel 项目</title>
    <url>/post/61887.html</url>
    <content><![CDATA[<p> 自从使用 <code>Laravel</code> 框架之后，面对庞大的<strong>文件夹结构</strong>，再用 <code>FTP</code> 手动覆盖源文件更新网站的方法实在是太憨了。因此想到使用 <code>Git</code> 和 <code>hook</code> 就可以自动化更新和管理 Laravel项目 了，更别提 <code>Git</code> 本职的<strong>版本管理</strong>能减少意外翻车时的损失了。 </p>
<a id="more"></a>

<div class="note info">
            <p><strong>无论如何</strong>，都要先去了解一下 Git 的基本使用，否则你会大概率听不懂我在讲什么：</p><p>Git入门必看：<a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">廖雪峰的Git教程</a></p><p>Git最佳实践：<a href="https://github.com/geeeeeeeeek/git-recipes" target="_blank" rel="noopener">Git 菜单</a></p><p>Git之道文档：<a href="http://iissnan.com/progit/" target="_blank" rel="noopener">Pro Git</a></p>
          </div>



<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文将在 <code>CentOS 7.6</code> 使用 <code>2.0</code> 版本以上的 <code>git</code> ，建立一个新的 <code>裸仓库</code> 利用 <code>Hook(钩子)</code> 来实现对 <code>Laravel</code> 为框架的项目实现<strong>自动化</strong>部署，管理。</p>
<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>当前我服务器的的 <strong>web目录</strong> 是这样的</p>
<p>laradock——基于 <code>docker</code> 的环境部署轮子</p>
<p>yeek——站点目录</p>
<p>yeek.git——git仓库</p>
<h3 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q &amp; A"></a>Q &amp; A</h3><p><strong>Q:</strong> 为什么使用 <code>2.0</code> 版本以上的 <code>git</code> 。</p>
<p><strong>A:</strong>因为貌似低版本的 <code>git</code> 不支持密钥登录，导致每次更新都账号密码，要这很不方便。</p>
<p><strong>Q:</strong>为什么使用 <code>钩子+裸仓库</code> 而不直接在服务器上建一个仓库，与开发环境（本地）进行同步。</p>
<p><strong>A:</strong> <strong>Git默认拒绝向非裸仓库push</strong> (<a href="https://blog.csdn.net/axiqia/article/details/80115133" target="_blank" rel="noopener">参考</a>)，网上大把能解决这个问题的，但都特别折腾</p>
<p>所以正确的方式是，在服务器上<strong>建立裸仓库</strong>，然后在本地<strong>push</strong>到服务器，接着在站点目录 <code>clone</code> 裸仓库是。</p>
<h2 id="添加秘钥"><a href="#添加秘钥" class="headerlink" title="添加秘钥"></a>添加秘钥</h2><p>在<strong>云服务器</strong>的根目录下的 <strong>home</strong> 文件夹下创建一个git文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /home/git</span><br></pre></td></tr></table></figure>

<p>切换到创建好的git文件夹</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /home/git</span><br></pre></td></tr></table></figure>

<p>创建 .ssh文件夹，里面主要用来放公钥</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir .ssh</span><br></pre></td></tr></table></figure>

<p>切换到.ssh文件夹并创建authorized_keys文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd .ssh</span><br><span class="line">touch authorized_keys</span><br></pre></td></tr></table></figure>



<p>然后在<strong>本地计算机</strong>里将 <strong>.ssh</strong> 文件夹里的 <strong>id_rsa.pub</strong> 中的内容复制到<strong>云服务器</strong>的 <strong>authorized_keys</strong> 文件中。</p>
<p>如果你的用户名目录下没有 <strong>.ssh</strong> 文件夹，请执行下面的指令，然后按三下回车。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure>



<h2 id="创建仓库和设置-hook"><a href="#创建仓库和设置-hook" class="headerlink" title="创建仓库和设置 hook"></a>创建仓库和设置 hook</h2><p>在目录中创建一个<strong>裸</strong>仓库，然后给予权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init --bare &#x2F;web&#x2F;yeek.git</span><br><span class="line">chown -R git:git yeek.git</span><br></pre></td></tr></table></figure>

<p>如果没有 git 用户，就新建一个</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo adduser git</span><br></pre></td></tr></table></figure>



<p>克隆刚刚新建的仓库，给写入权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone yeek.git</span><br><span class="line">chown -R git yeek</span><br></pre></td></tr></table></figure>



<p>进入<strong>裸</strong>仓库，添加钩子</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /web/yeek.git/hooks</span><br><span class="line">touch post-receive</span><br><span class="line">vim post-recive</span><br></pre></td></tr></table></figure>

<p>粘贴以下内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 打印输出</span></span><br><span class="line">echo '======上传代码到服务器======'</span><br><span class="line"><span class="meta">#</span><span class="bash"> 打开线上项目文件夹</span></span><br><span class="line">cd /www/wwwroot/test/website</span><br><span class="line"><span class="meta">#</span><span class="bash"> 这个很重要，如果不取消的话将不能在<span class="built_in">cd</span>的路径上进行git操作</span></span><br><span class="line">unset GIT_DIR</span><br><span class="line">git pull origin master</span><br><span class="line"><span class="meta">#</span><span class="bash"> 自动编译vue项目,如有需要请去掉前面的<span class="comment">#号</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> npm run build</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 自动更新composer（我暂时没试过）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> composer update</span></span><br><span class="line">echo $(date) &gt;&gt; hook.log</span><br><span class="line">echo '======代码更新完成======'</span><br></pre></td></tr></table></figure>

<p>保存退出后添加执行权</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod +x post-receive</span><br></pre></td></tr></table></figure>





<h2 id="安装项目"><a href="#安装项目" class="headerlink" title="安装项目"></a>安装项目</h2><h3 id="如果本地已有项目"><a href="#如果本地已有项目" class="headerlink" title="如果本地已有项目"></a>如果本地已有项目</h3><p>创建仓库，添加文件，提交（如果之前设置可以直接忽略）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m&quot;first commit&quot;</span><br></pre></td></tr></table></figure>



<p>设置远程仓库，push到服务器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote origin git@服务器地址:仓库位置</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>



<h3 id="如果本地没有项目"><a href="#如果本地没有项目" class="headerlink" title="如果本地没有项目"></a>如果本地没有项目</h3><p>从服务器克隆到本地</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone git@服务器地址:仓库位置</span><br></pre></td></tr></table></figure>

<p>开发完成后，添加文件，提交，push到服务器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m&quot;first commit&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>



<h3 id="对于-laravel-项目"><a href="#对于-laravel-项目" class="headerlink" title="对于 laravel 项目"></a>对于 laravel 项目</h3><p>laravel 项目的clone等操作并不会同步所有文件，还需要进入到目录里进行初始化</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">composer install</span><br><span class="line">cp .env.example .env</span><br><span class="line">php artisan key:generate</span><br><span class="line">sudo chmod -R 777 storage bootstrap/cache</span><br></pre></td></tr></table></figure>

<p>如果是 <code>laradock</code>，123 是在 <code>workspace</code> 容器中执行的，4是在服务器上执行的</p>
<h2 id="同步到-GitHub"><a href="#同步到-GitHub" class="headerlink" title="同步到 GitHub"></a>同步到 GitHub</h2><p>我还希望更新服务器的时候能同时更新到 <code>GitHub</code> ，所以在上面的 <code>hook</code> 末尾加上下面的脚本，保存退出</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo '======推送到 GitHub 开始======'</span><br><span class="line">git push github master</span><br><span class="line">echo '======推送到 GitHub 完成======'</span><br></pre></td></tr></table></figure>

<p>将 <code>home</code> 下的 git 文件夹里所有的文件所有者设置为 <code>git</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chown git:git -R &#x2F;home&#x2F;git&#x2F;</span><br></pre></td></tr></table></figure>

<p>切换到git用户，创建 ssh 秘钥，三连回车即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">su git</span><br><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure>

<p>将 <strong>home/git/.ssh/id_rsa.pub</strong> 文件的内容复制到 <code>GitHub</code> 上的 <a href="https://github.com/settings/keys" target="_blank" rel="noopener">SSH and GPG keys</a> 中</p>
<p><img src="http://markdown.yeek.top/20191218224637.png" alt=""></p>
<p>进入项目目录 <strong>/web/yeek</strong> 添加GitHub的仓库地址，可以尝试一下手动推送</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote add github 仓库地址</span><br><span class="line">git push github</span><br></pre></td></tr></table></figure>



<p>自此，已经完成了以 <code>git</code> 为基础的的自动化更新以及自动推送</p>
<p><img src="http://markdown.yeek.top/20191218225117.png" alt=""></p>
]]></content>
      <categories>
        <category>oam</category>
      </categories>
      <tags>
        <tag>运维</tag>
        <tag>Laravel</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 安装高版本 git</title>
    <url>/post/24889.html</url>
    <content><![CDATA[<div class="note info">
            <p>来源：<a href="https://stackoverflow.com/questions/21820715/how-to-install-latest-version-of-git-on-centos-7-x-6-x" target="_blank" rel="noopener">栈越</a></p>
          </div>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install http://opensource.wandisco.com/centos/7/git/x86_64/wandisco-git-release-7-2.noarch.rpm</span><br><span class="line">yum install git</span><br></pre></td></tr></table></figure>

<p>一路 <code>y</code> 下去就行了</p>
<p>安装完成后输入一下指令就可以输出 <code>Git</code> 版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure>



<p><img src="http://markdown.yeek.top/20191218001848.png" alt=""></p>
]]></content>
      <categories>
        <category>oam</category>
      </categories>
      <tags>
        <tag>运维</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 部署 LNMP 和 Laravel</title>
    <url>/post/20398.html</url>
    <content><![CDATA[<p>本文使用 <code>laradock</code> 这个轮子去用 <code>Docker</code> 搭建 <code>LNMP</code> + <code>Laravel</code> 环境。</p>
<p>本文需要对 <code>Linux</code> 、 <code>Laravel</code> 有些许了解</p>
<p>环境是 阿里云的 <code>CentOS7.6</code> ，如果是云服务器，记得在防火墙里开启 22 、 80 、 3306 等端口</p>
<a id="more"></a>



<h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><p><strong>Q</strong>: 为什么选择 <code>Docker</code></p>
<p><strong>A</strong>: docker 可以方便的部署 <code>LNMP</code> / <code>LAMP</code> 环境，只需要列出清单或者使用别人分享的配置就可以一键部署环境。</p>
<p><strong>Q</strong>: 为什么不使用 <code>Apache</code> 提供 web 服务</p>
<p><strong>A</strong>: <code>Nginx</code> 是大势所趋，或者说我想多学一个</p>
<h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><div class="note info">
            <p>建议直接参阅 <strong>菜鸟教程</strong> 的 <a href="https://www.runoob.com/docker/centos-docker-install.html" target="_blank" rel="noopener">CentOS Docker 安装</a> ，非常的简洁易懂</p>
          </div>

<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>安装支持工具</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure>

<p>添加阿里源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<p>更新 yum 缓存</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum makecache fast</span><br></pre></td></tr></table></figure>

<p>安装 Docker</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum -y install docker-ce</span><br></pre></td></tr></table></figure>

<p>启动 Docker</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure>

<h3 id="镜像加速"><a href="#镜像加速" class="headerlink" title="镜像加速"></a>镜像加速</h3><p>编辑（没有就新建） <em>/etc/docker/daemon.json</em> ，加入</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"registry-mirrors"</span>: [<span class="string">"http://hub-mirror.c.163.com"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://promotion.aliyun.com/ntms/act/kubernetes.html" target="_blank" rel="noopener">阿里云加速</a></p>
</blockquote>
<h2 id="Laradock"><a href="#Laradock" class="headerlink" title="Laradock"></a>Laradock</h2><div class="note info">
            <p>建议结合 laradock 的 <a href="https://laradock.io/" target="_blank" rel="noopener">文档</a> / <a href="https://laradock.linganmin.cn/" target="_blank" rel="noopener">中文文档</a> 进行阅读，预先了解 laradock 中关于 docker-compose 的相关指令</p>
          </div>

<h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>安装 <code>Git</code> ，这里第一步是更新 Git 的源，因为 CentOS 默认的 Git 版本过低。安装过程一路 <code>y</code> 即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install http://opensource.wandisco.com/centos/7/git/x86_64/wandisco-git-release-7-2.noarch.rpm</span><br><span class="line">yum install git</span><br></pre></td></tr></table></figure>

<p>从 <code>GitHub</code> 上拉取 <code>laradock</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/laradock/laradock.git /usr/<span class="built_in">local</span>/laradock</span><br></pre></td></tr></table></figure>

<p>我在这里指定下载到 <em>/usr/local/laradock</em></p>
<p>我打算将 web 服务放在 <em>/web</em> ，因此需要将 <code>laradock</code> 复制到 <em>/web</em> 中</p>
<p>在根目录创建 web 目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /web</span><br></pre></td></tr></table></figure>

<p>复制 <code>laradock</code> 到 <em>/web/lardock</em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp -r /usr/local/laradock/ /web/laradock</span><br></pre></td></tr></table></figure>

<p>进入复制好的 <em>laradock/</em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /web/laradock</span><br></pre></td></tr></table></figure>

<h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p>复制 <code>.env</code> 文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp env-example .env</span><br></pre></td></tr></table></figure>

<p>需要修改 .env 文件来<strong>个性化安装</strong>容器，下面是本文涉及到的配置</p>
<table>
<thead>
<tr>
<th align="left">变量名</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">APP_CODE_PATH_HOST</td>
<td align="left">项目位置</td>
</tr>
<tr>
<td align="left">CHANGE_SOURCE</td>
<td align="left">国内环境镜像加速</td>
</tr>
<tr>
<td align="left">WORKSPACE_NPM_REGISTRY</td>
<td align="left">NPM 源</td>
</tr>
<tr>
<td align="left">WORKSPACE_COMPOSER_REPO_PACKAGIST</td>
<td align="left">COMPOSER 源</td>
</tr>
<tr>
<td align="left">WORKSPACE_INSTALL_XDEBUG</td>
<td align="left">Xdebug扩展</td>
</tr>
<tr>
<td align="left">PHP_FPM_INSTALL_XDEBUG</td>
<td align="left">Xdebug扩展</td>
</tr>
</tbody></table>
<h4 id="项目位置"><a href="#项目位置" class="headerlink" title="项目位置"></a>项目位置</h4><p>我的 <code>laravel</code> 项目想命名为 <code>yeek</code> 所以</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">APP_CODE_PATH_HOST&#x3D;..&#x2F;</span><br></pre></td></tr></table></figure>

<p>所以也要修改 <code>nginx</code> 的站点设置。在 <strong>laradock/nginx/sites/</strong></p>
<p>先备份原先的 <code>default.conf</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv default.conf default.conf.example</span><br></pre></td></tr></table></figure>

<p><code>laradock</code> 给我们准备了一个 laravel 站点配置的示例文件，直接拿来用就行了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv laravel.conf.example default.conf</span><br></pre></td></tr></table></figure>

<p>然后将 <code>root</code> 后面路径里的 <code>laravel</code> 改为  <code>yeek</code></p>
<h4 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h4><p>使用国内源</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CHANGE_SOURCE&#x3D;true</span><br></pre></td></tr></table></figure>

<p><code>Composer</code> 使用阿里源</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">WORKSPACE_COMPOSER_REPO_PACKAGIST&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;composer&#x2F;</span><br></pre></td></tr></table></figure>

<p>NPM 使用淘宝源</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">WORKSPACE_NPM_REGISTRY&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<h4 id="MySQL版本"><a href="#MySQL版本" class="headerlink" title="MySQL版本"></a>MySQL版本</h4><div class="note danger">
            <p><code>MySQL</code> 建议使用 5.7 或者其他低版本，否则密码可能不兼容远程连接软件，</p>
          </div>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MYSQL_VERSION&#x3D;5.7</span><br></pre></td></tr></table></figure>

<p>MySQL项里还有其他配置，按需设置</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment">### MYSQL #################################################</span></span><br><span class="line"></span><br><span class="line">MYSQL_VERSION=<span class="number">5.7</span></span><br><span class="line">MYSQL_DATABASE=default</span><br><span class="line">MYSQL_USER=default</span><br><span class="line">MYSQL_PASSWORD=secret</span><br><span class="line">MYSQL_PORT=<span class="number">3306</span></span><br><span class="line">MYSQL_ROOT_PASSWORD=root</span><br><span class="line">MYSQL_ENTRYPOINT_INITDB=./mysql/docker-<span class="keyword">entrypoint</span><span class="bash">-initdb.d</span></span><br></pre></td></tr></table></figure>

<h4 id="开启-Xdebug"><a href="#开启-Xdebug" class="headerlink" title="开启 Xdebug"></a>开启 Xdebug</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">WORKSPACE_INSTALL_XDEBUG&#x3D;true</span><br><span class="line">PHP_FPM_INSTALL_XDEBUG&#x3D;true</span><br></pre></td></tr></table></figure>

<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p><code>YARN</code> 的安装是在是太慢了，而且暂时用不上，所以关掉</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">WORKSPACE_INSTALL_YARN=false</span><br></pre></td></tr></table></figure>

<h3 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h3><p>laradock需要 <code>docker-compose</code> 的支持，因此安装 Docker Compose</p>
<blockquote>
<p>可以去官网看最新版本的下载链接：<a href="https://docs.docker.com/compose/install/" target="_blank" rel="noopener">在Linux系统上安装Compose</a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo curl -L "https://github.com/docker/compose/releases/download/1.25.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>

<p>安装过程挺漫长的，漫长到我在第二次安装的时候，实在顶不住试了这个方法</p>
<blockquote>
<p>编辑 <code>/etc/ssh/ssh_config</code>，找到 <code>GSSAPIAuthentication no</code> 这行，删掉前面的注释，然后保存退出</p>
<p>–<a href="https://blog.csdn.net/zwkkkk1/article/details/94476963" target="_blank" rel="noopener">解决阿里云ECS服务器 git clone 速度慢</a></p>
</blockquote>
<p>然后写入权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>



<h3 id="安装-Nginx-MySQL-容器"><a href="#安装-Nginx-MySQL-容器" class="headerlink" title="安装 Nginx MySQL 容器"></a>安装 Nginx MySQL 容器</h3><p>在 <code>laradock</code> 这个目录下启动 Nginx 和 MySQL 容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker-compose up -d nginx mysql</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ol>
<li><code>docker-compose</code> 指令只能在有 <code>docker-compose.yml</code> 文件的目录中执行</li>
<li>第一次安装时间比安装 <code>Docker Compose</code> 还要漫长</li>
<li>期间看到红色的不要慌张，都是正常情况</li>
<li>这里有特别多的<a href="https://mojuchen.github.io/post/16264.html#天坑" target="_blank" rel="noopener">坑</a></li>
</ol>
<p><a href="http://markdown.yeek.top/bolg/20191016/6BFgQCKfGjU7.jpg?imageslim" target="_blank" rel="noopener"><img src="http://markdown.yeek.top/bolg/20191016/6BFgQCKfGjU7.jpg?imageslim" alt="红色不一定是错误"></a></p>
<h3 id="安装完成"><a href="#安装完成" class="headerlink" title="安装完成"></a>安装完成</h3><p>看到这几个容器都 <code>done</code> 则说明 <code>Nginx</code> 和 <code>MySQL</code> 安装完成了</p>
<p><img src="http://markdown.yeek.top/20191218022119.png" alt=""></p>
<p>此时访问服务器，返回的应该是 <code>404 Not Found nginx</code></p>
<p><a href="http://markdown.yeek.top/bolg/20191016/t69uSXfnsrXV.jpg?imageslim" target="_blank" rel="noopener"><img src="http://markdown.yeek.top/bolg/20191016/t69uSXfnsrXV.jpg?imageslim" alt="404"></a></p>
<p>在 <strong>/web/yeek/public</strong> 下新建一个 <code>index.php</code> ，内容是</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    phpinfo();</span><br></pre></td></tr></table></figure>

<p>新建完成后刷新页面，出现了 <code>phpinfo</code> ，可以检查安装的扩展。</p>
<p>然后删掉 <strong>yeek</strong> 目录，准备 <code>Laravel</code> 的安装。</p>
<h2 id="Laravel"><a href="#Laravel" class="headerlink" title="Laravel"></a>Laravel</h2><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><p>在之前的 <em>laradock</em> 目录进入 <strong>工作区</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker-compose exec workspace bash</span><br></pre></td></tr></table></figure>

<p>使用 <code>Composer</code> 安装 <code>Laravel</code></p>
<p>这里指定了 <code>Laravel</code> 的项目名是 <code>laravel</code> 版本是 <code>5.7.*</code> , 网站的文件夹是 <code>yeek</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">composer create-project --prefer-dist laravel&#x2F;laravel yeek 5.7.*</span><br></pre></td></tr></table></figure>

<h3 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h3><p>安装完成后，回到服务器，给予缓存和日志权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 要记得先退出 workspace 容器</span></span><br><span class="line">cd /web/yeek</span><br><span class="line">sudo chmod -R 777 storage bootstrap/cache</span><br></pre></td></tr></table></figure>

<p>访问服务器，页面出现 Laravel 的 <strong>欢迎页面</strong></p>
<p><a href="http://markdown.yeek.top/bolg/20191016/vvWgBqPpcBUw.png?imageslim" target="_blank" rel="noopener"><img src="http://markdown.yeek.top/bolg/20191016/vvWgBqPpcBUw.png?imageslim" alt="恭喜你安装成功"></a></p>
<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>在 docker 容器中，容器间的连接需要使用 <strong>容器名</strong> 而不是ip 地址，因此在 <code>.env</code> 中需要将</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DB_HOST&#x3D;127.0.0.1</span><br></pre></td></tr></table></figure>

<p>改为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DB_HOST&#x3D;mysql</span><br></pre></td></tr></table></figure>

<h2 id="天坑"><a href="#天坑" class="headerlink" title="天坑"></a>天坑</h2><h3 id="操作系统-Docker-容器"><a href="#操作系统-Docker-容器" class="headerlink" title="操作系统 / Docker 容器"></a>操作系统 / Docker 容器</h3><p><strong>端口占用</strong></p>
<p>阿里云的 <code>CentOS</code> 可能会自带 <code>Apache(httpd)</code> / <code>MySQL</code> ，他们会占用 <code>80</code> / <code>3306</code> 端口，建议安装容器前先检查一下</p>
<p><strong>修改配置不生效</strong></p>
<p>需要重构</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker-compose build &#123;container-name&#125;</span><br></pre></td></tr></table></figure>

<p><strong>安装容器慢</strong></p>
<p>超过5分钟建议 Ctrl+C 终止，然后重建</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">docker-compose build &#123;container-name&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Laravel-1"><a href="#Laravel-1" class="headerlink" title="Laravel"></a>Laravel</h3><p><strong>内存不足</strong></p>
<p>安装 <code>Laravel</code> 时出现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">proc_open(): fork failed - Cannot allocate memory</span><br></pre></td></tr></table></figure>

<p>使用添加内存三连：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dd if=/dev/zero of=/var/swap.1 bs=1M count=1024</span><br><span class="line">mkswap /var/swap.1</span><br><span class="line">swapon /var/swap.1</span><br></pre></td></tr></table></figure>

<blockquote>
<p>参考: <a href="https://segmentfault.com/a/1190000019193527" target="_blank" rel="noopener">添加内存</a> 和 <a href="https://www.njphper.com/posts/f954164.html" target="_blank" rel="noopener">docker内无法添加</a></p>
</blockquote>
<p>虽然在 docker 里无法添加内存，但是执行指令之后退出 workspace 再进入之后，就可以继续安装了</p>
<p>安装完 Laravel 后不是 <strong>欢迎页面</strong> 或者是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">There is no existing directory at &quot;&#x2F;var&#x2F;www&#x2F;laravel&#x2F;storage&#x2F;logs&quot; and its not buildable: Permission denied</span><br></pre></td></tr></table></figure>

<p>在 <code>Laravel</code> 的根目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo chmod -R 777 storage bootstrap&#x2F;cache</span><br></pre></td></tr></table></figure>

<h3 id="数据库-MySQL"><a href="#数据库-MySQL" class="headerlink" title="数据库 / MySQL"></a>数据库 / MySQL</h3><p><strong>数据库连接失败</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SQLSTATE[HY000] [2002] Connection refused</span><br></pre></td></tr></table></figure>

<p>去 .env 配置数据库信息</p>
<p><strong>更改数据库版本后容器启动失败</strong></p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改 .env 文件</span></span><br><span class="line">MYSQL_VERSION=<span class="number">5.7</span> <span class="comment"># 默认为 latest</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#停止mysql容器</span></span><br><span class="line">docker-compose stop mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除旧数据库数据 </span></span><br><span class="line">rm -rf ~/.laradock/data/mysql </span><br><span class="line"></span><br><span class="line"><span class="comment"># ！注意重启docker应用，然后再构建新 mysql </span></span><br><span class="line">docker-compose build mysql </span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新创建容器 </span></span><br><span class="line">docker-compose up -d nginx mysql </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看现有 mysql 版本 </span></span><br><span class="line">docker inspect laradock_mysql_1</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>oam</category>
      </categories>
      <tags>
        <tag>运维</tag>
        <tag>PHP</tag>
        <tag>Laravel</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel 基础 Blade模板</title>
    <url>/post/29874.html</url>
    <content><![CDATA[<p>Blade 是 Laravel 提供的一个简单而又强大的模板引擎。主要参考了 Laravel 中文网的<a href="https://learnku.com/docs/laravel/5.7/blade/2265#displaying-data" target="_blank" rel="noopener">文档</a></p>
<a id="more"></a>



<h2 id="笔记归档"><a href="#笔记归档" class="headerlink" title="笔记归档"></a>笔记归档</h2><p><a href="https://mojuchen.github.io/tags/Laravel/" target="_blank" rel="noopener">Laravel 基础教程 笔记</a></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li>Blade 并不限制你在视图中使用原生 PHP 代码。</li>
<li>所有 Blade 视图文件都将被编译成原生的 PHP 代码并缓存起来，除非它被修改，否则不会重新编译，这就意味着 Blade 基本上不会给你的应用增加任何负担。</li>
<li>Blade 视图文件使用 <code>.blade.php</code> 作为文件扩展名，被存放在 <code>resources/views</code>目录。</li>
</ul>
<h2 id="模板继承"><a href="#模板继承" class="headerlink" title="模板继承"></a>模板继承</h2><h3 id="定义布局"><a href="#定义布局" class="headerlink" title="定义布局"></a>定义布局</h3><p>这个是是教程中的基础模板，位置放在 <em>resources\views\</em><code>layouts.blade.php</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Laravel 基础教程 | Moreant&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        header &#123;</span><br><span class="line">            width: 1000px;</span><br><span class="line">            height: 150px;</span><br><span class="line">            margin: 0 auto;</span><br><span class="line">            background: #f5f5f5;</span><br><span class="line">            border: 1px solid #ddd;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        main &#123;</span><br><span class="line">            width: 1000px;</span><br><span class="line">            height: 300px;</span><br><span class="line">            margin: 0 auto;</span><br><span class="line">            margin-top: 15px;</span><br><span class="line">            clear: both;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        main nav &#123;</span><br><span class="line">            float: left;</span><br><span class="line">            width: 20%;</span><br><span class="line">            height: inherit;</span><br><span class="line">            background: #f5f5f5;</span><br><span class="line">            border: 1px solid #ddd;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        main .content &#123;</span><br><span class="line">            float: right;</span><br><span class="line">            width: 75%;</span><br><span class="line">            height: inherit;</span><br><span class="line">            background: #f5f5f5;</span><br><span class="line">            border: 1px solid #ddd;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        footer &#123;</span><br><span class="line">            width: 1000px;</span><br><span class="line">            height: 150px;</span><br><span class="line">            margin: 0 auto;</span><br><span class="line">            margin-top: 15px;</span><br><span class="line">            background: #f5f5f5;</span><br><span class="line">            border: 1px solid #ddd;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;header&gt;</span><br><span class="line">        头部</span><br><span class="line">    &lt;&#x2F;header&gt;</span><br><span class="line">    &lt;main&gt;</span><br><span class="line">        &lt;nav&gt;</span><br><span class="line">            侧边栏</span><br><span class="line">        &lt;&#x2F;nav&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;content&quot;&gt;</span><br><span class="line">            主要内容区域</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;main&gt;</span><br><span class="line">    &lt;footer&gt;</span><br><span class="line">        底部</span><br><span class="line">    &lt;&#x2F;footer&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>然后在 <code>body</code> 里定义布局，添加 <code>@section</code> 和 <code>@yield</code> 标记：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;header&gt;</span><br><span class="line">        @section(&#39;header&#39;)</span><br><span class="line">        头部</span><br><span class="line">        @show</span><br><span class="line">    &lt;&#x2F;header&gt;</span><br><span class="line">    &lt;main&gt;</span><br><span class="line">        &lt;nav&gt;</span><br><span class="line">            @section(&#39;nav&#39;)</span><br><span class="line">            侧边栏</span><br><span class="line">            @show</span><br><span class="line">        &lt;&#x2F;nav&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;content&quot;&gt;</span><br><span class="line">            @yield(&#39;content&#39;,&#39;主要内容区域&#39;)</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;main&gt;</span><br><span class="line">    &lt;footer&gt;</span><br><span class="line">        @section(&#39;footer&#39;)</span><br><span class="line">        底部</span><br><span class="line">        @show</span><br><span class="line">    &lt;&#x2F;footer&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>

<p><code>@section</code> 和 <code>@yield</code> 的区别是：</p>
<p><strong>@section</strong> 标记的重点是<strong>部分</strong></p>
<p><strong>@yield</strong> 标记的重点是<strong>位置</strong></p>
<p><a href="http://markdown.yeek.top/bolg/20191010/Hl50d6TFsByh.jpg?imageslim" target="_blank" rel="noopener"><img src="http://markdown.yeek.top/bolg/20191010/Hl50d6TFsByh.jpg?imageslim" alt="父视图"></a></p>
<h3 id="继承布局"><a href="#继承布局" class="headerlink" title="继承布局"></a>继承布局</h3><p>我们创建的是 student 的视图，因此视图的位置是 <em>resource\views*</em>student***<code>section1.blade.php</code> ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@extends(&#39;layouts&#39;)</span><br><span class="line"></span><br><span class="line">@section(&#39;title&#39;,&#39;Section1&#39;)</span><br><span class="line"></span><br><span class="line">@section(&#39;header&#39;)</span><br><span class="line"></span><br><span class="line">@parent</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;header&lt;&#x2F;h1&gt;</span><br><span class="line"></span><br><span class="line">@endsection</span><br><span class="line"></span><br><span class="line">@section(&#39;content&#39;)</span><br><span class="line">主要</span><br><span class="line">@endsection</span><br><span class="line"></span><br><span class="line">@section(&#39;footer&#39;,&#39;&lt;h1&gt;底部在这里&lt;h1&gt;&#39;)</span><br></pre></td></tr></table></figure>

<p><strong>@extends：</strong>指定继承的布局</p>
<p><strong>@section：</strong>指定替换父视图的部分，有两种写法</p>
<p><strong>@parent：</strong>指定在这个 <code>@section</code> 中是增加内容，而不是覆盖</p>
<p>然后在 <strong>控制器</strong> 中指定渲染的视图</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public function section1()</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; 也可以用 &#x2F; 来表示层级 如 student&#x2F;section1</span><br><span class="line">        return view(&#39;student.section1&#39;);</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>或者直接在路由中输出视图</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Route::view(&#39;ss&#39;,&#39;student.section1&#39;);</span><br></pre></td></tr></table></figure>

<p><a href="http://markdown.yeek.top/bolg/20191010/FWTrrykRGIHn.jpg?imageslim" target="_blank" rel="noopener"><img src="http://markdown.yeek.top/bolg/20191010/FWTrrykRGIHn.jpg?imageslim" alt="继承子视图"></a></p>
<h3 id="Components-amp-Slots"><a href="#Components-amp-Slots" class="headerlink" title="Components &amp; Slots"></a>Components &amp; Slots</h3><p><strong>components</strong> 会主动引用视图，常用于设置复用的部分</p>
<p><strong>基础使用</strong></p>
<p>比如有一个会在整个应用中复用的警告，位置在 <em>respurces\views\</em><code>alert.blade.php</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;alert alert-danger&quot;&gt;</span><br><span class="line">    &#123;&#123; $slot &#125;&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>然后在需要使用这个警告的地方标记：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@component(&#39;alert&#39;)</span><br><span class="line">You are not allowed to access this resource!</span><br><span class="line">@endcomponent</span><br></pre></td></tr></table></figure>

<p><strong>slot</strong></p>
<p>由于任何没有被 <code>@slot</code> 指令包裹住的内容将传递给组件中的 <code>$slot</code> 变量：</p>
<p>显示效果是这样的</p>
<p><a href="http://markdown.yeek.top/bolg/20191011/ENmfbuDSPpM6.jpg?imageslim" target="_blank" rel="noopener"><img src="http://markdown.yeek.top/bolg/20191011/ENmfbuDSPpM6.jpg?imageslim" alt="img"></a></p>
<p><code>@slot</code> 是用于注入内容到已知的 slot 中，比如我们需要在上面的基础上添加标题：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;alert alert-danger&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;alert-title&quot;&gt;&#123;&#123; $title &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &#123;&#123; $slot &#125;&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>在需要使用的地方这样标记：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@component(&#39;alert&#39;)</span><br><span class="line">@slot(&#39;title&#39;)</span><br><span class="line">Forbidden</span><br><span class="line">@endslot</span><br><span class="line"></span><br><span class="line">You are not allowed to access this resource!</span><br><span class="line">@endcomponent</span><br></pre></td></tr></table></figure>

<p>显示效果</p>
<p><a href="http://markdown.yeek.top/bolg/20191011/aI7FAQaMxSda.png?imageslim" target="_blank" rel="noopener"><img src="http://markdown.yeek.top/bolg/20191011/aI7FAQaMxSda.png?imageslim" alt="这样就添加了标题"></a></p>
<p><strong>传递数据</strong></p>
<p>当然也可以传递数据，首先定义要显示的数据，在上面的基础上添加用户名：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;alert alert-danger&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;alert-title&quot;&gt;&#123;&#123; $title &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">    &#123;&#123; $name &#125;&#125; - &#123;&#123; $slot &#125;&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>使用的时候在 component 的<strong>第二个参数传入数组</strong>即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@component(&#39;alert&#39;,[&#39;name&#39;&#x3D;&gt;&#39;moreant&#39;])</span><br><span class="line">@slot(&#39;title&#39;)</span><br><span class="line">Forbidden</span><br><span class="line">@endslot</span><br><span class="line"></span><br><span class="line">You are not allowed to access this resource!</span><br><span class="line">@endcomponent</span><br></pre></td></tr></table></figure>

<p>效果</p>
<p><a href="http://markdown.yeek.top/bolg/20191011/2THUBnqYH021.png?imageslim" target="_blank" rel="noopener"><img src="http://markdown.yeek.top/bolg/20191011/2THUBnqYH021.png?imageslim" alt="mark"></a></p>
<p><strong>组件别名</strong></p>
<p>子目录中的 Blade 组件，使用别名访问更方便。现在假设有一个 Blade 组件存储在 <code>resources/views/components/alert.blade.php</code>，可以使用 <code>component</code> 方法给它起个 <code>alert</code> 的别名。通常，在 <code>AppServiceProvider</code> 的 <code>boot</code> 方法中完成这个操作：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use Illuminate\Support\Facades\Blade;</span><br><span class="line"></span><br><span class="line">Blade::component(&#39;components.alert&#39;, &#39;alert&#39;);</span><br></pre></td></tr></table></figure>

<p>组件定义好别名后，使用指令渲染：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@alert([&#39;type&#39; &#x3D;&gt; &#39;danger&#39;])</span><br><span class="line">    You are not allowed to access this resource!</span><br><span class="line">@endalert</span><br></pre></td></tr></table></figure>

<p>也可以不传参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@alert</span><br><span class="line">    You are not allowed to access this resource!</span><br><span class="line">@endalert</span><br></pre></td></tr></table></figure>

<h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><h3 id="传入数据"><a href="#传入数据" class="headerlink" title="传入数据"></a>传入数据</h3><p>在上面的 <strong>模板继承</strong> 中已经涉及到一部分的数据传入了</p>
<p><a href="https://mojuchen.github.io/post/46063.html#c&s-cdsj" target="_blank" rel="noopener">component的传入数据</a></p>
<p>可以在 <code>view</code> 的第二个参数中传入数组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Route::get(&#39;greeting&#39;, function () &#123;</span><br><span class="line">    return view(&#39;welcome&#39;, [&#39;name&#39; &#x3D;&gt; &#39;Samantha&#39;]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>模板是php文件，自然也<strong>能使用php函数</strong>，例如在之前的警告中加入时间</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;alert alert-danger&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;alert-title&quot;&gt;&#123;&#123; $title &#125;&#125; - &#123;&#123; date(&#39;H:i:s&#39;) &#125;&#125; &lt;&#x2F;div&gt;</span><br><span class="line">    &#123;&#123; $slot &#125;&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p><a href="http://markdown.yeek.top/bolg/20191011/xa9JBwGNNzIm.png?imageslim" target="_blank" rel="noopener"><img src="http://markdown.yeek.top/bolg/20191011/xa9JBwGNNzIm.png?imageslim" alt="img"></a></p>
<p><strong>示未转义数据</strong></p>
<p>默认情况下，Blade ` {{ }} `语句会自动调用 PHP 的 <code>htmlspecialchars</code> 函数防止 XSS 攻击。不想转义的话，可以使用以下语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hello, &#123;!! $name !!&#125;.</span><br></pre></td></tr></table></figure>

<h3 id="渲染-JSON"><a href="#渲染-JSON" class="headerlink" title="渲染 JSON"></a>渲染 JSON</h3><p>有时，为了初始化 JavaScript 变量，需要将传入视图的数组进行 JSON 化。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    var app &#x3D; &lt;?php echo json_encode($array); ?&gt;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>然而，可以用 <code>@json</code> Blade 指令替代手动 <code>json_encode</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    var app &#x3D; @json($array);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="原样输出"><a href="#原样输出" class="headerlink" title="原样输出"></a>原样输出</h3><p>由于许多 JavaScript 框架都使用花括号来表示给定的表达式应用在浏览器中显示，<strong>你可以使用 @ 符号来告知 Blade 渲染引擎你需要保留这个表达式的原始形态</strong>。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;Laravel&lt;&#x2F;h1&gt;</span><br><span class="line"></span><br><span class="line">Hello, @&#123;&#123; name &#125;&#125;.</span><br></pre></td></tr></table></figure>

<p>在这个例子中， <code>@</code> 符号最终将会被 Blade 引擎删除；达到不受 Blade 模版引擎影响的目的， 最终 ``表达式会保持不变使得 JavaScript 框架可以使用它。</p>
<p><strong>@verbatim 指令</strong></p>
<p><strong>在页面中如果你需要大部分内容展现 JavaScript 变量</strong>，你可以使用 <code>@verbatim</code> 指令来包裹 HTML 内容，这样你就不必在每个 Blade 打印语句前加上 <code>@</code> 符号：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@verbatim</span><br><span class="line">    &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">        Hello, &#123;&#123; name &#125;&#125;.</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">@endverbatim</span><br></pre></td></tr></table></figure>

<h2 id="结构控制"><a href="#结构控制" class="headerlink" title="结构控制"></a>结构控制</h2><h3 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h3><p>blade 提供了 <code>@if</code> 、 <code>@elseif</code> 、 <code>@else</code> 和 <code>@endif</code> 来构造 if 表达式、</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@if (count($records) &#x3D;&#x3D;&#x3D; 1)</span><br><span class="line">    我有一个记录！</span><br><span class="line">@elseif (count($records) &gt; 1)</span><br><span class="line">    我有多个记录！</span><br><span class="line">@else</span><br><span class="line">    我没有任何记录！</span><br><span class="line">@endif</span><br></pre></td></tr></table></figure>

<p>为了方便， Blade 还提供了一个 <code>@unless</code> 指令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@unless (Auth::check())</span><br><span class="line">    您还没有登录。</span><br><span class="line">@endunless</span><br></pre></td></tr></table></figure>

<p>除了上述的条件指令之外， <code>@isset</code> 和 <code>@empty</code> 指令也可以视为与 PHP 函数有相同的功能：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@isset($records)</span><br><span class="line">    &#x2F;&#x2F; $records 被定义且不为空...</span><br><span class="line">@endisset</span><br><span class="line"></span><br><span class="line">@empty($records)</span><br><span class="line">    &#x2F;&#x2F; $records 是 &quot;empty&quot; 的...</span><br><span class="line">@endempty</span><br></pre></td></tr></table></figure>

<p>使用循环时，你也可以结束循环或跳过当前迭代：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@foreach ($users as $user)</span><br><span class="line">    @if ($user-&gt;type &#x3D;&#x3D; 1)</span><br><span class="line">        @continue</span><br><span class="line">    @endif</span><br><span class="line"></span><br><span class="line">    &lt;li&gt;&#123;&#123; $user-&gt;name &#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line"></span><br><span class="line">    @if ($user-&gt;number &#x3D;&#x3D; 5)</span><br><span class="line">        @break</span><br><span class="line">    @endif</span><br><span class="line">@endforeach</span><br></pre></td></tr></table></figure>

<p>你也可使用单行指令来包含指令声明条件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@foreach ($users as $user)</span><br><span class="line">    @continue($user-&gt;type &#x3D;&#x3D; 1)</span><br><span class="line"></span><br><span class="line">    &lt;li&gt;&#123;&#123; $user-&gt;name &#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line"></span><br><span class="line">    @break($user-&gt;number &#x3D;&#x3D; 5)</span><br><span class="line">@endforeach</span><br></pre></td></tr></table></figure>

<p><strong>forelse</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@forelse ($users as $user)</span><br><span class="line">    &lt;li&gt;&#123;&#123; $user-&gt;name &#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">@empty</span><br><span class="line">    &lt;p&gt;No users&lt;&#x2F;p&gt;</span><br><span class="line">@endforelse</span><br></pre></td></tr></table></figure>

<h3 id="循环变量"><a href="#循环变量" class="headerlink" title="循环变量"></a>循环变量</h3><p>循环时，可以在循环内使用 <code>$loop</code> 变量。这个变量可以提供一些有用的信息，比如当前循环的索引，当前循环是否为首次迭代，抑或当前循环是否为末次迭代：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@foreach ($users as $user)</span><br><span class="line">    @if ($loop-&gt;first)</span><br><span class="line">        This is the first iteration.</span><br><span class="line">    @endif</span><br><span class="line"></span><br><span class="line">    @if ($loop-&gt;last)</span><br><span class="line">        This is the last iteration.</span><br><span class="line">    @endif</span><br><span class="line"></span><br><span class="line">    &lt;p&gt;This is user &#123;&#123; $user-&gt;id &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">@endforeach</span><br></pre></td></tr></table></figure>

<p>在一个嵌套的循环中，可以通过使用 <code>$loop</code> 变量的 <code>parent</code> 属性来获取父循环中的 <code>$loop</code> 变量：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@foreach ($users as $user)</span><br><span class="line">    @foreach ($user-&gt;posts as $post)</span><br><span class="line">        @if ($loop-&gt;parent-&gt;first)</span><br><span class="line">            This is first iteration of the parent loop.</span><br><span class="line">        @endif</span><br><span class="line">    @endforeach</span><br><span class="line">@endforeach</span><br></pre></td></tr></table></figure>

<p><code>$loop</code> 变量也包含了其它各种有用的属性：</p>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>$loop-&gt;index</code></td>
<td align="left">当前循环迭代的索引（从 0 开始）。</td>
</tr>
<tr>
<td align="left"><code>$loop-&gt;iteration</code></td>
<td align="left">当前循环迭代 （从 1 开始）。</td>
</tr>
<tr>
<td align="left"><code>$loop-&gt;remaining</code></td>
<td align="left">循环中剩余迭代数量。</td>
</tr>
<tr>
<td align="left"><code>$loop-&gt;count</code></td>
<td align="left">迭代中的数组元素总数。</td>
</tr>
<tr>
<td align="left"><code>$loop-&gt;first</code></td>
<td align="left">当前迭代是否为循环中的首次迭代。</td>
</tr>
<tr>
<td align="left"><code>$loop-&gt;last</code></td>
<td align="left">当前迭代是否为循环中的末次迭代。</td>
</tr>
<tr>
<td align="left"><code>$loop-&gt;depth</code></td>
<td align="left">当前循环的嵌套深度级别。</td>
</tr>
<tr>
<td align="left"><code>$loop-&gt;parent</code></td>
<td align="left">在嵌套循环中，父循环的 loop 变量。</td>
</tr>
</tbody></table>
<h2 id="引入子视图"><a href="#引入子视图" class="headerlink" title="引入子视图"></a>引入子视图</h2><p>Blade 的 <code>@include</code> 指令允许你从另一个视图中引入 Blade 视图。所有在父视图的可用变量在被引入的视图中都是可用的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    @include(&#39;shared.errors&#39;)</span><br><span class="line"></span><br><span class="line">    &lt;form&gt;</span><br><span class="line">        &lt;!--表单内容 --&gt;</span><br><span class="line">    &lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>被引入的视图会继承父视图中的所有数据，同时也可以向引入的视图传递额外的数组数据：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@include(&#39;view.name&#39;, [&#39;some&#39; &#x3D;&gt; &#39;data&#39;])</span><br></pre></td></tr></table></figure>

<p>当然，如果尝试使用 <code>@include</code> 去引入一个不存在的视图，Laravel 会抛出一个错误。如果想引入一个不能确定存在与否的视图，你应当使用 @includeIf 指令：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@includeIf(<span class="string">'view.name'</span>, [<span class="string">'some'</span> =&gt; <span class="string">'data'</span>])</span><br></pre></td></tr></table></figure>

<p>如果想根据给定的布尔条件来 <code>@include</code> 一个视图，你可以使用 <code>@includeWhen</code> 指令：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@includeWhen($boolean, <span class="string">'view.name'</span>, [<span class="string">'some'</span> =&gt; <span class="string">'data'</span>])</span><br></pre></td></tr></table></figure>

<p>如果想引入给定视图数组中的第一个视图，你可以使用 <code>includeFirst</code> 指令：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@includeFirst([<span class="string">'custom.admin'</span>, <span class="string">'admin'</span>], [<span class="string">'some'</span> =&gt; <span class="string">'data'</span>])</span><br></pre></td></tr></table></figure>


<p>更多关于 Blade 模板 的使用方法在 <a href="https://learnku.com/docs/laravel/5.7/blade/2265" target="_blank" rel="noopener">这里</a></p>
<ul>
<li><a href="https://learnku.com/docs/laravel/5.7/blade/2265#stacks" target="_blank" rel="noopener">堆栈</a></li>
<li><a href="https://learnku.com/docs/laravel/5.7/blade/2265#service-injection" target="_blank" rel="noopener">服务注入</a></li>
<li>Blade 扩展<ul>
<li><a href="https://learnku.com/docs/laravel/5.7/blade/2265#custom-if-statements" target="_blank" rel="noopener">自定义 If 语句</a></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>笔记</tag>
        <tag>PHP</tag>
        <tag>Laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel 基础 Eloquent ORM 操作数据库</title>
    <url>/post/39513.html</url>
    <content><![CDATA[<blockquote>
<p>数据库表通常相互关联。 例如，一篇博客文章可能有许多评论，或者一个订单对应一个下单用户。Eloquent 让这些关联的管理和使用变得简单，并支持多种类型的关联</p>
</blockquote>
<p><strong>Eloquent ORM</strong> 可以通过 <strong>模型-数据库</strong> 来交互，使用模型来查询、插入、更新、删除。同时，Eloquent 可以使用查询构造器的所有功能</p>
<p><a href="https://learnku.com/index.php/docs/laravel/5.7/eloquent-relationships/2295" target="_blank" rel="noopener">更多介绍</a></p>
<a id="more"></a>



<h2 id="笔记归档"><a href="#笔记归档" class="headerlink" title="笔记归档"></a>笔记归档</h2><p><a href="https://mojuchen.github.io/tags/Laravel/" target="_blank" rel="noopener">Laravel 基础教程 笔记</a></p>
<h2 id="模型建立"><a href="#模型建立" class="headerlink" title="模型建立"></a>模型建立</h2><p><strong>模型</strong>，也就是 <code>Model</code> ，位置在 <em>app\</em> 。使用 <code>Eloquent ORM</code> 模型的基本如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; use 是必须的</span><br><span class="line">use Illuminate\Database\Eloquent\Model;</span><br><span class="line"></span><br><span class="line">class Student extends Model</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 指定表名</span><br><span class="line">    protected $table &#x3D; &#39;student&#39;;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 指定 id</span><br><span class="line">    protected $primaryKey &#x3D; &#39;id&#39;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果不指定 <code>$table</code> 就会假定关联的表名是<strong>模型名+s</strong>，如此例的表名就是 <code>students</code></p>
<h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><p>查询返回的类型都是<strong>对象</strong>。</p>
<p>常用的查询方法有： <code>all</code> / <code>find</code> / <code>findOrfail</code></p>
<p>Eloquent 模型充当一个<a href="https://learnku.com/docs/laravel/5.7/queries" target="_blank" rel="noopener">查询构造器</a> ，所以也可以<strong>添加查询条件</strong>：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$student = Student::where(<span class="string">'id'</span>,<span class="string">'&gt;='</span>,<span class="string">'1005'</span>)-&gt;get();</span><br></pre></td></tr></table></figure>



<div class="tabs" id="select"><ul class="nav-tabs"><li class="tab active"><a href="#select-1">all</a></li><li class="tab"><a href="#select-2">find</a></li><li class="tab"><a href="#select-3">findOrFail</a></li></ul><div class="tab-content"><div class="tab-pane active" id="select-1"><p><strong>all</strong></p>
<p>返回表中的所有数据：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$student = Student::all();</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="select-2"><p><strong>find</strong></p>
<p>根据<strong>主键</strong>查找：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$student = Student::find(<span class="number">1003</span>);</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="select-3"><p><strong>findOrFail</strong></p>
<p>在 <code>find()</code> 的基础上，如果找不到就<strong>返回404：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$student = Student::findOrFail(<span class="number">1010</span>);</span><br></pre></td></tr></table></figure></div></div></div>





<h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p>创建常用的方法有： <code>save</code> / <code>create</code> / <code>fill</code> / <code>firstOrCreate</code> / <code>firstOrNew</code> / <code>updateOrCreate</code></p>
<h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>使用对象创建数据：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$student = <span class="keyword">new</span> Student();</span><br><span class="line">$student-&gt;name = <span class="string">'moreant'</span>;</span><br><span class="line">$student-&gt;age = <span class="string">'18'</span>;</span><br><span class="line">$result = $student-&gt;save();</span><br></pre></td></tr></table></figure>

<p>用这个方法新增数据，Laravel 会自动在 <code>created_at</code> 和 <code>update_at</code> 中插入时间戳，并且维护。</p>
<h3 id="批量赋值"><a href="#批量赋值" class="headerlink" title="批量赋值"></a>批量赋值</h3><p>首先需要去模型中指定 <code>fillable</code> 或 <code>guarded</code> 属性，因为所有的 Eloquent 模型在默认情况下都不能进行批量赋值。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// use 是必须的</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 可以批量赋值的属性</span></span><br><span class="line">    <span class="keyword">protected</span> $fillable = [<span class="string">'name'</span>,<span class="string">'age'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不可以批量赋值的属性</span></span><br><span class="line">    <span class="keyword">protected</span> $guarded = [<span class="string">'id'</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意，在使用上，只能是 <code>$fillable</code> 或 <code>$guarded</code> 二选一。</p>
<p><strong>将 $guarded 定义为空数组，则所有属性都可以被批量赋值</strong></p>
<p>之后，就可以使用 <code>create()</code> 插入新数据，并且返回刚刚保存的<strong>实例</strong>：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$student =  Student::create([<span class="string">'name'</span> =&gt; <span class="string">'imooc'</span>, <span class="string">'age'</span> =&gt; <span class="number">3</span>]);</span><br></pre></td></tr></table></figure>

<p>或者使用实例中的 <code>fill()</code> 来赋值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$student-&gt;fill([&#39;name&#39; &#x3D;&gt; &#39;imooc&#39;, &#39;age&#39; &#x3D;&gt; 3]);</span><br></pre></td></tr></table></figure>

<h3 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h3><p>如果不需要，可以<strong>关闭时间戳</strong>，只需要在模型中将 <code>$timestamps</code> 属性设置为 <code>false</code>：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 是否维护时间戳</span></span><br><span class="line">    <span class="keyword">public</span> $timestamps = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>设置为时间戳为<strong>中国时间</strong>：</p>
<p>在 <em>config\</em><code>app.php</code> 中修改 <code>timezone</code> 属性，</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">'timezone'</span> =&gt; <span class="string">'Asia/Shanghai'</span></span><br></pre></td></tr></table></figure>

<p><strong>指定时间戳的格式：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> $dateFormat = <span class="string">'U'</span>;</span><br></pre></td></tr></table></figure>

<p><strong>自定义时间戳字段名：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> CREATED_AT = <span class="string">'creation_date'</span>;</span><br><span class="line"><span class="keyword">const</span> UPDATED_AT = <span class="string">'last_update'</span>;</span><br></pre></td></tr></table></figure>

<h3 id="其他创建方法"><a href="#其他创建方法" class="headerlink" title="其他创建方法"></a>其他创建方法</h3><p>有三种常用的创建方法 <code>firstOrCreate</code>/ <code>firstOrNew</code> / <code>updateOrCreate</code></p>
<p><strong>firstOrCreate</strong></p>
<p>用给定的值查找数据库，如果不存在，则插入记录到数据库中。返回插入后的实例。</p>
<p>查询 <code>name</code> 为 <code>morea3</code> 的数据，查到返回对象，查不到用给定的参数创建：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$student =  Student::firstOrCreate([<span class="string">'name'</span> =&gt; <span class="string">'morea3'</span>],[<span class="string">'age'</span>=&gt;<span class="number">29</span>]);</span><br></pre></td></tr></table></figure>

<p><strong>firstOrNew</strong></p>
<p>与 <code>firstOrCreat</code> 相似，只不过返回的是一个<strong>未保存</strong>的实例，需要使用 <code>save</code> 方法来保存：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$student =  Student::firstOrNew([<span class="string">'name'</span> =&gt; <span class="string">'morea66'</span>],[<span class="string">'age'</span>=&gt;<span class="number">18</span>]);</span><br></pre></td></tr></table></figure>

<p><strong>updateOrCreate</strong></p>
<p>更新版的 <strong>firstOrCreate</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$student =  Student::firstOrCreate([<span class="string">'name'</span> =&gt; <span class="string">'morea'</span>],[<span class="string">'age'</span>=&gt;<span class="number">18</span>]);</span><br></pre></td></tr></table></figure>

<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>基本使用：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$student =  Student::find(<span class="number">10</span>);</span><br><span class="line">$student-&gt;name  = <span class="string">"immoc"</span>;</span><br><span class="line">$status =  $student-&gt;save();</span><br></pre></td></tr></table></figure>

<p>使用 <code>where</code> 方法查找对象，并且更新</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$student =  Student::where(<span class="string">'name'</span>,<span class="string">'='</span>,<span class="string">'moreant'</span>)-&gt;first();</span><br><span class="line">$student-&gt;age  = <span class="number">20</span>;</span><br><span class="line">$status =  $student-&gt;save();</span><br></pre></td></tr></table></figure>

<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>删除的常用方法有： <code>delete</code> / <code>destory</code> /</p>
<p><strong>通过模型</strong>删除</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$student =  Student::find(<span class="number">13</span>);</span><br><span class="line">$result =  $student-&gt;delete();</span><br></pre></td></tr></table></figure>

<p><strong>通过主键</strong>删除</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Student::destory(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">Student::destory(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">Student::destory([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br></pre></td></tr></table></figure>

<p><strong>通过查询</strong>删除</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$result = Student::where(<span class="string">'id'</span>,<span class="string">'&gt;='</span>,<span class="string">'4'</span>)-&gt;delete();</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>笔记</tag>
        <tag>PHP</tag>
        <tag>Laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel 基础 数据库操作</title>
    <url>/post/37751.html</url>
    <content><![CDATA[<p>Laravel 有三种数据库操作方式，<strong>DB Facades</strong> , <strong>查询构造器</strong> , <strong>Eloquent ORM</strong></p>
<a id="more"></a>



<h2 id="笔记归档"><a href="#笔记归档" class="headerlink" title="笔记归档"></a>笔记归档</h2><p><a href="https://mojuchen.github.io/tags/Laravel/" target="_blank" rel="noopener">Laravel 基础教程 笔记</a></p>
<h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><p>打开根目录的 <code>.env</code> 文件</p>
<p>9~14行就是数据库的配置信息了：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">DB_CONNECTION=mysql</span><br><span class="line">DB_HOST=localhost</span><br><span class="line">DB_PORT=<span class="number">3306</span></span><br><span class="line">DB_DATABASE=laravel</span><br><span class="line">DB_USERNAME=root</span><br><span class="line">DB_PASSWORD=</span><br></pre></td></tr></table></figure>

<p>演示中的创建表：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">create table <span class="keyword">if</span> not exists student(</span><br><span class="line"></span><br><span class="line">`id` INT AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line"></span><br><span class="line">`name` VARCHAR(<span class="number">255</span>) NOT <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> COMMENT <span class="string">'姓名'</span>,</span><br><span class="line"></span><br><span class="line">`age` TINYINT UNSIGNED not <span class="keyword">null</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">'年龄'</span>,</span><br><span class="line"></span><br><span class="line">`sex` TINYINT UNSIGNED not <span class="keyword">null</span> <span class="keyword">DEFAULT</span> <span class="number">10</span> COMMENT <span class="string">'性别'</span>,</span><br><span class="line"></span><br><span class="line">`created_at` DATETIME <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'新增时间'</span>,</span><br><span class="line"></span><br><span class="line">`updated_at` DATETIME <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'修改时间'</span></span><br><span class="line"></span><br><span class="line">)ENGINE=INNODB <span class="keyword">DEFAULT</span> CHARSET=UTF8 AUTO_INCREMENT=<span class="number">1001</span> COMMENT=<span class="string">'学生表'</span>;</span><br></pre></td></tr></table></figure>

<h2 id="DB-Facades"><a href="#DB-Facades" class="headerlink" title="DB Facades"></a>DB Facades</h2><p>Laravel 给我们提供了 Facades 来更方便的使用静态接口。</p>
<p>所有的 Laravel Facades 都定义在 <code>Illuminate\Support\Facades</code> 命名空间下。</p>
<p>主要的方法有： <code>select</code> / <code>insert</code> / <code>update</code> / <code>delete</code></p>
<p>使用 DB Facades 一定要 use：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一般 use 都放这里</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">DB</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>查询：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$arr = DB::select(<span class="string">'select * from student'</span>);</span><br></pre></td></tr></table></figure>

<p><strong>插入：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$bool =  DB::insert(<span class="string">'insert into student (name, age) values (?, ?)'</span>, [<span class="string">'moreant'</span>, <span class="number">18</span>]);</span><br></pre></td></tr></table></figure>

<p><strong>更新</strong>：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$int = DB::update(<span class="string">'update student set age = ? where name = ?'</span>, [<span class="string">'19'</span>,<span class="string">'moreant'</span>]);</span><br></pre></td></tr></table></figure>

<p><strong>删除：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$int2 = DB::delete(<span class="string">'delete from student where id &gt; ?'</span>, [<span class="number">1005</span>]);</span><br></pre></td></tr></table></figure>

<p><a href="https://learnku.com/docs/laravel/5.7/facades/2251" target="_blank" rel="noopener">了解更多 Facades</a></p>
<h2 id="查询构造器"><a href="#查询构造器" class="headerlink" title="查询构造器"></a>查询构造器</h2><p>Laravel 的<strong>查询构造器</strong>使用了 PDO 参数绑定来免受 SQL 注入攻击</p>
<h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p>常用的插入方法有： <code>insert</code> / <code>insertGetId</code></p>
<p><strong>简单插入：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$bool = DB::table(<span class="string">'student'</span>)-&gt;insert(</span><br><span class="line">    [<span class="string">'name'</span>=&gt;<span class="string">'test'</span>,<span class="string">'age'</span>=&gt;<span class="number">20</span>]</span><br><span class="line"></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><strong>获得自增 id：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$id = DB::table(<span class="string">'student'</span>)-&gt;insertGetId(</span><br><span class="line">    [<span class="string">'name'</span>=&gt;<span class="string">'boob'</span>,<span class="string">'age'</span>=&gt;<span class="number">22</span>]</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><strong>插入多条数据</strong>：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$bool = DB::table(<span class="string">'student'</span>)-&gt;insertGetId(</span><br><span class="line">    [</span><br><span class="line">        [<span class="string">'name'</span>=&gt;<span class="string">'boob'</span>,<span class="string">'age'</span>=&gt;<span class="number">15</span>],</span><br><span class="line">        [<span class="string">'name'</span>=&gt;<span class="string">'sanm'</span>,<span class="string">'age'</span>=&gt;<span class="number">17</span>],</span><br><span class="line">        [<span class="string">'name'</span>=&gt;<span class="string">'job'</span>,<span class="string">'age'</span>=&gt;<span class="number">14</span>],</span><br><span class="line">    ]</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="更新与自增"><a href="#更新与自增" class="headerlink" title="更新与自增"></a>更新与自增</h3><p>常用的更新方法有： <code>update</code> / <code>increment</code> / <code>decrement</code></p>
<p><strong>基本使用：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$cow = DB::table(<span class="string">'student'</span>)</span><br><span class="line">    -&gt;where(<span class="string">'age'</span>, <span class="number">19</span>)</span><br><span class="line">    -&gt;update([<span class="string">'age'</span> =&gt; <span class="number">21</span>]);</span><br></pre></td></tr></table></figure>

<p><strong>自增 1：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$cow = DB::table(<span class="string">'student'</span>)-&gt;increment(<span class="string">'age'</span>);</span><br></pre></td></tr></table></figure>

<p><strong>自增 3：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$cow = DB::table(<span class="string">'student'</span>)-&gt;increment(<span class="string">'age'</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<p><strong>自减：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$cow = DB::table(<span class="string">'student'</span>)-&gt;decrement(<span class="string">'age'</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<p><strong>有条件的自增：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$cow = DB::table(<span class="string">'student'</span>)</span><br><span class="line">    -&gt;where(<span class="string">'name'</span>, <span class="string">'moreant'</span>)</span><br><span class="line">    -&gt;increment(<span class="string">'age'</span>, <span class="number">4</span>);</span><br></pre></td></tr></table></figure>

<p><strong>在自增同时修改其他数据</strong>：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$cow = DB::table(<span class="string">'student'</span>)</span><br><span class="line">    -&gt;where(<span class="string">'name'</span>, <span class="string">'test'</span>)</span><br><span class="line">    -&gt;increment(<span class="string">'age'</span>, <span class="number">4</span>, [<span class="string">'name'</span> =&gt; <span class="string">'myTest'</span>]);</span><br></pre></td></tr></table></figure>

<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>常用的删除方法有： <code>delete</code> / <code>truncate</code></p>
<p><strong>删除指定条件：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$num = DB::table(<span class="string">'student'</span>)</span><br><span class="line">    -&gt;where(<span class="string">'id'</span>, <span class="string">'1004'</span>)</span><br><span class="line">    -&gt;delete();</span><br></pre></td></tr></table></figure>

<p><strong>范围条件：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$num = DB::table(<span class="string">'student'</span>)</span><br><span class="line">    -&gt;where(<span class="string">'id'</span>, <span class="string">'&gt;='</span>, <span class="string">'1004'</span>)</span><br><span class="line">    -&gt;delete();</span><br></pre></td></tr></table></figure>

<p><strong>清空表</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">DB::table(<span class="string">'student'</span>)-&gt;truncate();</span><br></pre></td></tr></table></figure>

<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>常用的查询方法有： <code>get</code> / <code>first</code> / <code>where</code> / <code>pluck</code> / <code>select</code> / <code>chunk</code></p>
<p><strong>get()</strong></p>
<p>获取所有表数据：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$student = DB::table(<span class="string">'student'</span>)-&gt;get();</span><br></pre></td></tr></table></figure>

<p><strong>first()</strong></p>
<p>第一条数据：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$student = DB::table(<span class="string">'student'</span>)-&gt;first();</span><br></pre></td></tr></table></figure>

<p>可以修改排序：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$student = DB::table(<span class="string">'student'</span>)</span><br><span class="line">    -&gt;orderBy(<span class="string">'id'</span>,<span class="string">'abs'</span>)</span><br><span class="line">    -&gt;first();</span><br></pre></td></tr></table></figure>

<p><strong>where()</strong></p>
<p>条件查询：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$student = DB::table(<span class="string">'student'</span>)</span><br><span class="line">    -&gt;where(<span class="string">'id'</span>, <span class="string">'&gt;='</span>, <span class="string">'1002'</span>)</span><br><span class="line">    -&gt;get();</span><br></pre></td></tr></table></figure>

<p>多条件查询：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$student = DB::table(<span class="string">'student'</span>)</span><br><span class="line">    -&gt;whereRaw(<span class="string">'id &gt;= ? and age &gt;= ?'</span>,[<span class="number">1004</span>,<span class="number">19</span>])</span><br><span class="line">    -&gt;get();</span><br></pre></td></tr></table></figure>

<p><strong>pluck()</strong></p>
<p>返回指定字段：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$student = DB::table(<span class="string">'student'</span>)</span><br><span class="line">    -&gt;pluck(<span class="string">'name'</span>);</span><br></pre></td></tr></table></figure>

<p><a href="http://markdown.yeek.top/bolg/20191007/Rn3hu10dOL71.jpg?imageslim" target="_blank" rel="noopener"><img src="http://markdown.yeek.top/bolg/20191007/Rn3hu10dOL71.jpg?imageslim" alt="img"></a></p>
<p>自定义键值：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$student = DB::table(<span class="string">'student'</span>)</span><br><span class="line">	-&gt;whereRaw(<span class="string">'id &gt;= ? and age &gt;= ?'</span>,[<span class="number">1004</span>,<span class="number">19</span>])</span><br><span class="line">	-&gt;pluck(<span class="string">'name'</span>,<span class="string">'id'</span>);</span><br></pre></td></tr></table></figure>

<p><a href="http://markdown.yeek.top/bolg/20191007/2teaHlSkVfJv.jpg?imageslim" target="_blank" rel="noopener"><img src="http://markdown.yeek.top/bolg/20191007/2teaHlSkVfJv.jpg?imageslim" alt="img"></a></p>
<p><strong>select()</strong></p>
<p>指定返回的字段：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$student = DB::table(<span class="string">'student'</span>)</span><br><span class="line">	-&gt;select(<span class="string">'id'</span>,<span class="string">'name'</span>)</span><br><span class="line">	-&gt;get();</span><br></pre></td></tr></table></figure>

<p><strong>chunk()</strong></p>
<p>分块结果，一次获取结果集的一小块，并将其传递给 <code>闭包</code> 函数进行处理：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">DB::table(<span class="string">'student'</span>)-&gt;orderBy(<span class="string">'id'</span>)-&gt;chunk(<span class="number">3</span>, <span class="function"><span class="keyword">function</span> <span class="params">($students)</span> </span>&#123;</span><br><span class="line">    var_dump($students);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>可以通过在 <code>闭包</code> 中返回 <code>false</code> 来终止继续获取分块结果：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">DB::table(<span class="string">'student'</span>)-&gt;orderBy(<span class="string">'id'</span>)-&gt;chunk(<span class="number">3</span>, <span class="function"><span class="keyword">function</span> <span class="params">($users)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Process the records...</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><p>常用的聚合函数方法有： <code>count</code> / <code>max</code> / <code>min</code> / <code>avg</code> / <code>sum</code></p>
<p><strong>count</strong></p>
<p>查询结果的总数：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$num = DB::table(<span class="string">'student'</span>)-&gt;count();</span><br></pre></td></tr></table></figure>

<p>都可以结合其他查询语句：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$num = DB::table(<span class="string">'student'</span>)</span><br><span class="line">    -&gt;where(<span class="string">'id'</span>,<span class="string">'&gt;='</span>,<span class="string">'1005'</span>)</span><br><span class="line">    -&gt;count();</span><br></pre></td></tr></table></figure>

<p><strong>max</strong></p>
<p>查询结果的返回最大值</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$max = DB::table(<span class="string">'student'</span>)-&gt;max(<span class="string">'age'</span>);</span><br></pre></td></tr></table></figure>

<p><strong>min</strong></p>
<p>查询结果的返回最小值：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$min = DB::table(<span class="string">'student'</span>)-&gt;min(<span class="string">'age'</span>);</span><br></pre></td></tr></table></figure>

<p><strong>avg</strong></p>
<p>平均值：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$avg = DB::table(<span class="string">'student'</span>)-&gt;avg(<span class="string">'age'</span>);</span><br></pre></td></tr></table></figure>

<p><strong>sum</strong></p>
<p>总和：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$sum = DB::table(<span class="string">'student'</span>)-&gt;sum(<span class="string">'age'</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>笔记</tag>
        <tag>PHP</tag>
        <tag>Laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel 基础 视图</title>
    <url>/post/45228.html</url>
    <content><![CDATA[<p><a href="https://www.imooc.com/video/12497" target="_blank" rel="noopener"><strong>慕课网教程</strong></a>里的视图讲的比之前控制器就更少了，详细的内容以后读完 <a href="https://learnku.com/docs/laravel/5.7/views/2259" target="_blank" rel="noopener"><strong>Laravel China 社区里的文档</strong></a>再补</p>
<a id="more"></a>

<h2 id="笔记归档"><a href="#笔记归档" class="headerlink" title="笔记归档"></a>笔记归档</h2><p><a href="https://mojuchen.github.io/tags/Laravel/" target="_blank" rel="noopener">Laravel 基础教程 笔记</a></p>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>视图目录： <em>resources\views\</em></p>
<p>在视图目录中新建一个 <code>member-info.php</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hello</span><br></pre></td></tr></table></figure>

<p>在<strong>控制器</strong>中输出视图</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MemberController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">info</span><span class="params">($id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> view(<span class="string">'member-info'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>路由</strong>中直接输出</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Route::view(<span class="string">'member'</span>,<span class="string">'member-info'</span>);</span><br></pre></td></tr></table></figure>

<p>更多请参考 <a href="https://mojuchen.github.io/post/37002.html#视图" target="_blank" rel="noopener">路由</a></p>
<p><strong>传递参数</strong></p>
<p>首先文件名是 <code>*.blade.php</code> 表示是模板文件才可以传递参数， Blade 模板的更多信息在 <a href="https://learnku.com/docs/laravel/5.7/blade" target="_blank" rel="noopener">这里</a></p>
<p>控制器中</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">info</span><span class="params">($name=null)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> view(<span class="string">'member/info'</span>, [  </span><br><span class="line">            <span class="string">'name'</span> =&gt; $name</span><br><span class="line">        ]);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>层级关系用 <code>.</code> 也是可以的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> view(<span class="string">'member.info'</span>, [</span><br><span class="line">           <span class="string">'name'</span> =&gt; $name</span><br><span class="line">       ]);</span><br></pre></td></tr></table></figure>

<p>路由中</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Route::get(<span class="string">'test/'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> view(<span class="string">'test'</span>, [<span class="string">'name'</span> =&gt; <span class="string">'moreant'</span>]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>或者直接使用 <code>view</code> 方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Route::view(<span class="string">'/test2'</span>,<span class="string">'test'</span>,[<span class="string">'name'</span> =&gt; <span class="string">'moreant-test'</span>]);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>笔记</tag>
        <tag>PHP</tag>
        <tag>Laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel 基础 控制器</title>
    <url>/post/30761.html</url>
    <content><![CDATA[<p><code>Laravel</code> 框架第二篇——控制器，控制器的介绍在慕课网的<strong>视频教程</strong>中说的非常少（6分钟），而且大部分都是跟路由的连接。 Laravel China 社区的<strong>文档</strong>就非常详尽</p>
<a id="more"></a>

<h2 id="笔记归档"><a href="#笔记归档" class="headerlink" title="笔记归档"></a>笔记归档</h2><p><a href="https://mojuchen.github.io/tags/Laravel/" target="_blank" rel="noopener">Laravel 基础教程 笔记</a></p>
<h2 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h2><h3 id="定义控制器"><a href="#定义控制器" class="headerlink" title="定义控制器"></a>定义控制器</h3><p>控制器目录： <em>App\Http\Controllers</em></p>
<p>例如 <code>MemberController.php</code></p>
<ul>
<li>文件名： 名字+Controller</li>
<li>命名空间 App\Http\Controllers</li>
<li>继承 Controller</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MemberController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">info</span><span class="params">($id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'member-info-'</span>.$id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="关联路由"><a href="#关联路由" class="headerlink" title="关联路由"></a>关联路由</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Route::get(<span class="string">'member/&#123;id&#125;'</span>,<span class="string">'MemberController@info'</span>);</span><br></pre></td></tr></table></figure>

<h3 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h3>]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>笔记</tag>
        <tag>PHP</tag>
        <tag>Laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel 基础 路由</title>
    <url>/post/8294.html</url>
    <content><![CDATA[<p>考web前端证需要学习一个 <code>php</code> 框架，学校没有选择以前的 <code>tp5</code> 而是选择了 <code>Laravel</code>。真就还没学会 <code>tp5</code> 又要入门 <code>Laravel</code> 呗</p>
<ul>
<li>集成环境 Wampserver3.1.7（PHP 7.2.14）</li>
<li>Laravel 5.7.*</li>
</ul>
<a id="more"></a>

<h2 id="笔记归档"><a href="#笔记归档" class="headerlink" title="笔记归档"></a>笔记归档</h2><p><a href="https://mojuchen.github.io/tags/Laravel/" target="_blank" rel="noopener">Laravel 基础教程 笔记</a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装就不说了，考完证再补笔记</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>初学者了解目录结构，有利于对框架的快速入门</p>
<p><a href="https://xueyuanjun.com/post/19426.html" target="_blank" rel="noopener">[ Laravel 5.8 文档 ] 快速入门 —— 目录结构</a></p>
<p>参考文档</p>
<blockquote>
<p><a href="https://learnku.com/docs/laravel/5.8/routing/3890#parameters-regular-expression-constraints" target="_blank" rel="noopener">Laravel 5.8 中文文档</a></p>
</blockquote>
<h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p><a href="https://mojuchen.github.io/tags/Laravel/" target="_blank" rel="noopener">Laravel 基础教程 笔记</a></p>
<p>在 <code>Laravel57</code> 中，所有 Laravel 路由都定义在位于 <code>routes</code> 目录下的路由文件中，有四个路由文件：</p>
<ul>
<li><code>web.php</code> 支持 Session、CSRF 保护以及 Cookie 加密功能</li>
<li><code>api.php</code> 支持频率限制功能，这些路由是无状态的，所以请求通过这些路由进入应用需要通过 token 进行认证并且不能访问 Session 状态。</li>
<li><code>console.php</code> 定义了基于控制台的应用入口（路由）。</li>
<li><code>channels.php</code> 注册应用支持的所有事件广播频道。</li>
</ul>
<h2 id="基本路由"><a href="#基本路由" class="headerlink" title="基本路由"></a>基本路由</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//get</span></span><br><span class="line">Route::get(<span class="string">'base1'</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello World"</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//post</span></span><br><span class="line">Route::post(<span class="string">'base2'</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Base2"</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><a href="http://markdown.yeek.top/bolg/20190924/hL9KC4unbONL.jpg?imageslim" target="_blank" rel="noopener"><img src="http://markdown.yeek.top/bolg/20190924/hL9KC4unbONL.jpg?imageslim" alt="mark"></a></p>
<h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Route::redirect(<span class="string">'/here'</span>, <span class="string">'/there'</span>, <span class="number">301</span>);</span><br></pre></td></tr></table></figure>

<p>其中 <code>here</code> 表示原路由，<code>there</code> 表示重定向之后的路由，<code>301</code> 是一个 HTTP 状态码，用于标识重定向。</p>
<h2 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h2><p>可以方便的给指定路由<strong>生成URL</strong>或者<strong>重定向</strong></p>
<p>链式调用 <code>name</code> 方法来指定名称：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Route::get(<span class="string">'user/profile'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;)-&gt;name(<span class="string">'profile'</span>);</span><br></pre></td></tr></table></figure>

<p>然后就可以使用<strong>全局辅助函数</strong> <code>route</code> 来生成链接或者重定向：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 生成 URL...</span></span><br><span class="line">$url = route(<span class="string">'profile'</span>);</span><br><span class="line"><span class="comment">//url: http://localhost/user/profile</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成重定向...</span></span><br><span class="line"><span class="keyword">return</span> redirect()-&gt;route(<span class="string">'profile'</span>);</span><br></pre></td></tr></table></figure>

<h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Route::get(<span class="string">'/welcome'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> view(<span class="string">'welcome'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>也可以直接使用 <code>view</code></p>
<p>第一个参数是包含视图名称的<strong>URL</strong>，第二个参数是需要渲染的<strong>视图名称</strong>，第三个参数是传入的<strong>数据</strong>（可选）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Route::view(<span class="string">'/welcome'</span>,<span class="string">'welcome'</span>);</span><br><span class="line"></span><br><span class="line">Route::view(<span class="string">'/welcome'</span>,<span class="string">'welcome'</span>,[<span class="string">'name'</span> =&gt; <span class="string">'moreant'</span>]);</span><br></pre></td></tr></table></figure>

<h2 id="多请求路由"><a href="#多请求路由" class="headerlink" title="多请求路由"></a>多请求路由</h2><p>HTTP请求动作有：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Route::get($uri, $callback);</span><br><span class="line">Route::post($uri, $callback);</span><br><span class="line">Route::put($uri, $callback);</span><br><span class="line">Route::patch($uri, $callback);</span><br><span class="line">Route::delete($uri, $callback);</span><br><span class="line">Route::options($uri, $callback);</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>match</code> 指定响应多种的请求动作</p>
</li>
<li><p><code>any</code> 响应所有请求动作</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//只响应 get 和 post </span></span><br><span class="line">Route::match([<span class="string">'get'</span>, <span class="string">'post'</span>], <span class="string">'multy1'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"multy1"</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//响应一切请求动作</span></span><br><span class="line">Route::any(<span class="string">'multy2'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"multy2"</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><a href="http://markdown.yeek.top/bolg/20190924/4JWpT7cVnHUl.jpg?imageslim" target="_blank" rel="noopener"><img src="http://markdown.yeek.top/bolg/20190924/4JWpT7cVnHUl.jpg?imageslim" alt="mark"></a></p>
<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p><strong>必选参数</strong>：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Route::get(<span class="string">'user/&#123;id&#125;'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"User-id-"</span> . $id;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>多个参数：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Route::get(<span class="string">'posts/&#123;post&#125;/comments/&#123;comment&#125;'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($postId, $commentId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>可选参数：</strong></p>
<ol>
<li>设置默认值</li>
<li>参数后加 <code>?</code></li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Route::get(<span class="string">'user/&#123;name?&#125;'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($name = <span class="string">"moreant"</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'User-name-'</span> . $name;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="正则约束"><a href="#正则约束" class="headerlink" title="正则约束"></a>正则约束</h2><p>链式调用 <code>where</code> 方法可以给路由添加正则约束</p>
<p>单个：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Route::get(<span class="string">'user/&#123;name&#125;'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'User-name-'</span> . $name;</span><br><span class="line">&#125;)-&gt;where(<span class="string">'name'</span>,<span class="string">'[A-Za-z]+'</span>);</span><br></pre></td></tr></table></figure>

<p>多个：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Route::get(<span class="string">'user/&#123;id&#125;/&#123;name&#125;'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($id, $name)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;)-&gt;where([<span class="string">'id'</span> =&gt; <span class="string">'[0-9]+'</span>, <span class="string">'name'</span> =&gt; <span class="string">'[a-z]+'</span>]);</span><br></pre></td></tr></table></figure>

<p><strong>全局约束</strong></p>
<p>在 <em>laravel\app\Providers\</em><code>RouteServiceProvider.php</code> 的 <code>boot</code> 方法中可以定义全局约束</p>
<p>所有的id都只能为数字：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Route::pattern(<span class="string">'id'</span>, <span class="string">'[0-9]+'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">parent</span>::boot();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>可以在具体路由实例中覆盖全局约束</strong></p>
<h2 id="群组"><a href="#群组" class="headerlink" title="群组"></a>群组</h2><p>可以共享路由属性</p>
<p><strong>中间件</strong>的群组，在 group 之前调用 <code>middleware</code> 方法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Route::middleware([<span class="string">'first'</span>, <span class="string">'second'</span>])-&gt;group(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    Route::get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// // 使用 first 和 second 中间件</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    Route::get(<span class="string">'user/profile'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// // 使用 first 和 second 中间件</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>命名空间</strong>的群组，使用 <code>namespace</code> 方法将相同的 PHP 命名空间分配给路由组的中所有的控制器：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Route::namespace(<span class="string">'Admin'</span>)-&gt;group(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 在 "App\Http\Controllers\Admin" 命名空间下的控制器</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>笔记</tag>
        <tag>PHP</tag>
        <tag>Laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>URL的美化</title>
    <url>/post/52295.html</url>
    <content><![CDATA[<p>本站使用的博客框架是 <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener"><strong>Hexo</strong></a> ，其中默认的文章链接设置是这样的 <code>:year/:month/:day/:title/</code> 具体到本片文章是这样的 <code>2019/08/30/URL%e7%9a%84%e7%be%8e%e5%8c%96</code> 。</p>
<p>这个URL有 3 层结构，而且中文经过了 <strong>URL编码</strong> ，很长的 URL 一方面不利于传播分享，另一方面不利于搜索引擎的抓取(虽然国内搜索引擎不会抓<em>GitHub</em>的内容)。</p>
<a id="more"></a>

<h2 id="v1-0"><a href="#v1-0" class="headerlink" title="v1.0"></a>v1.0</h2><p>在 Hexo 的官方文档中就有介绍 URL链接 的设置：</p>
<blockquote>
<p>您可以在 <code>_config.yml</code> 配置中调整网站的永久链接或者在每篇文章的 Front-matter 中指定。</p>
<p>by: Hexo 官方文档——<a href="https://hexo.io/zh-cn/docs/permalinks" target="_blank" rel="noopener">永久链接</a>（Permalinks）</p>
</blockquote>
<p>我使用了这篇文档中示例的：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">:category/:title.html</span></span><br></pre></td></tr></table></figure>

<p>也就是 <strong>类型/标题</strong></p>
<p>然后在文章的的 Front-matter 中指定 permalink：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">URLBeautification</span></span><br></pre></td></tr></table></figure>

<p>这样，URL就变成了：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">mix/URLBeautification.html</span></span><br></pre></td></tr></table></figure>

<p>简介，望文生义。但也存在问题：</p>
<ul>
<li><p>需要制定 permalink ，否则中文标题还是会被 URL编码。</p>
</li>
<li><p>需要去找到对应的 permalink 标题，一般要去 Google翻译。</p>
</li>
<li><p>遇到两个类型的文章，URL就存在冲突</p>
<p>比如在 <a href="https://moreant.github.io/post/18324.html">foreach的遍历效率高吗？</a> 中，一开始的类型是 <code>java</code> 和 <code>php</code> 。URL链接选择了 <code>java</code> ，链接是：<code>java/forOrForeach.html</code> ，但是这篇文章主要的内容还是 <code>php</code> ，URL 反而会导致对文章的误导。</p>
</li>
</ul>
<h2 id="v2-0"><a href="#v2-0" class="headerlink" title="v2.0"></a>v2.0</h2><p>然后去百度搜索了一下，找到现在这个解决方案：</p>
<p><strong>使用 hexo-abbrlink</strong></p>
<p>实现的方案，是：</p>
<p>对<code>标题</code>+<code>时间</code>进行 <code>crc</code> 然后用<code>十进制</code>或者<code>十六进制</code>表示，保存在<code>front-matter</code>中。</p>
<blockquote>
<p><a href="https://post.zz173.com/detail/hexo-abbrlink.html" target="_blank" rel="noopener">hexo-abbrlink介绍</a></p>
</blockquote>
<p>只需要安装 <code>hexo-addrlink</code>   in <a href="https://github.com/rozbo/hexo-abbrlink" target="_blank" rel="noopener">GitHub</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>

<p>然后在<code>config.yml</code>，修改<code>permalink</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">post/:abbrlink.html</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc16</span>  <span class="comment"># 算法：crc16(default) and crc32</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">dec</span>    <span class="comment"># 进制：dec(default) and hex</span></span><br></pre></td></tr></table></figure>

<p>这个是使用了各个算法、进制的效果</p>
<table>
<thead>
<tr>
<th align="left">算法</th>
<th align="left">进制</th>
<th align="left">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="left">crc16</td>
<td align="left">hex</td>
<td align="left"><code>https://post.zz173.com/posts/3ab2.html</code></td>
</tr>
<tr>
<td align="left">crc16</td>
<td align="left">dec</td>
<td align="left"><code>https://post.zz173.com/posts/12345.html</code></td>
</tr>
<tr>
<td align="left">crc32</td>
<td align="left">hex</td>
<td align="left"><code>https://post.zz173.com/posts/9a8b6c4d.html</code></td>
</tr>
<tr>
<td align="left">crc32</td>
<td align="left">dec</td>
<td align="left"><code>https://post.zz173.com/posts/1690090958.html</code></td>
</tr>
</tbody></table>
<blockquote>
<p>by: <a href="https://post.zz173.com/detail/hexo-abbrlink-2.0.4.html" target="_blank" rel="noopener">abbrlink更新2.0.4说明</a></p>
</blockquote>
<p>所以最终的链接是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;moreant.github.io&#x2F;post&#x2F;8375.html</span><br></pre></td></tr></table></figure>

<p>虽然不能从链接中得到关于文章的信息了，但是实现了：</p>
<ul>
<li>自动生成唯一连接</li>
<li>短小精悍</li>
</ul>
<p>是目前URL链接的最优解了</p>
]]></content>
      <categories>
        <category>mix</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>ThinkPHP5学习笔记</title>
    <url>/post/7661.html</url>
    <content><![CDATA[<p>本文是 慕课网 <a href="https://www.imooc.com/learn/832" target="_blank" rel="noopener"><strong>快速入门ThinkPHP 5.0基础篇</strong></a> 的一个笔记。笔者使用的是WampServer环境，编辑器是VScode和Typora</p>
<a id="more"></a>



<h2 id="Readme"><a href="#Readme" class="headerlink" title="Readme"></a>Readme</h2><h3 id="信息"><a href="#信息" class="headerlink" title="信息"></a>信息</h3><p>author: Moreant</p>
<p>create: 8/11/2019</p>
<p>email: <a href="mailto:552191481@qq.com">552191481@qq.com</a></p>
<p>website: <a href="http://yeek.top/" target="_blank" rel="noopener">http://yeek.top</a></p>
<h3 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h3><p>目录除非特殊说明，默认以tp5为根目录</p>
<p>章间三换行，节间二换行，小节间一换行</p>
<p><strong>Markdown语言规范</strong></p>
<p>h2 章节</p>
<p>h3 节</p>
<p>h4 小节</p>
<p>代码 <code>单行代码，路径</code></p>
<p>斜体 <em>文件名</em></p>
<p>粗体 <strong>重点</strong></p>
<p><a href="https://blog.csdn.net/u014061630/article/details/81359144" target="_blank" rel="noopener">Markdown语法入门</a></p>
<h2 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h2><h3 id="扩展配置"><a href="#扩展配置" class="headerlink" title="扩展配置"></a>扩展配置</h3><p><strong>方便将一类的配置信息集合在同一个php文件中</strong></p>
<p>一般放在 <code>app\conf\extra\</code> 中</p>
<p>例如 <em>email.php</em>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    return[</span><br><span class="line">        &#39;host&#39; &#x3D;&gt; &#39;smtp@qq.com&#39;,</span><br><span class="line">        &#39;name&#39; &#x3D;&gt; &#39;moreant@qq.com&#39;</span><br><span class="line">    ];</span><br><span class="line">&#x2F;&#x2F;在配置信息中就会显示为</span><br><span class="line">&#39;email&#39; &#x3D;&gt; </span><br><span class="line">    array (size&#x3D;2)</span><br><span class="line">      &#39;app_email&#39; &#x3D;&gt; string &#39;552191481qq.com&#39; (length&#x3D;15)</span><br><span class="line">      &#39;app_author&#39; &#x3D;&gt; string &#39;Moreant&#39; (length&#x3D;7)</span><br></pre></td></tr></table></figure>

<h3 id="config类和函数"><a href="#config类和函数" class="headerlink" title="config类和函数"></a>config类和函数</h3><p><strong>config类的使用</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1:在类前面指定根命名空间</span></span><br><span class="line">$res = \think\Config::get();</span><br><span class="line">dump($res);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2:在namespace下加上</span></span><br><span class="line"><span class="keyword">use</span> \<span class="title">think</span>\<span class="title">Config</span>;</span><br></pre></td></tr></table></figure>

<p><strong>常用方法</strong></p>
<table>
<thead>
<tr>
<th align="left">config类</th>
<th align="left">config助手函数</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">get()</td>
<td align="left">config()</td>
<td align="left">返回所有的配置信息</td>
</tr>
<tr>
<td align="left">get(“database”)</td>
<td align="left">config(“database”)</td>
<td align="left">返回database的配置信息</td>
</tr>
<tr>
<td align="left">set(‘user’,‘moreant’)</td>
<td align="left">config(‘user’,‘moreant’)</td>
<td align="left">设置user为moreant</td>
</tr>
<tr>
<td align="left">set(‘user’,‘moreant’,‘index’)</td>
<td align="left">config(‘user’,‘moreant’,‘index’)</td>
<td align="left">指定是index的作用域</td>
</tr>
<tr>
<td align="left">has(‘user’)</td>
<td align="left">config(‘?user’)</td>
<td align="left">返回布尔值，存在为true</td>
</tr>
</tbody></table>
<h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p><code>$_ENV</code> 所有的环境变量， <code>$_ENV[&#39;PHP_EMAIL&#39;]</code> PHP_EMAIL这项的配置信息</p>
<h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><p><strong>dump($_ENV) 数组为空</strong></p>
<p>需要去 <code>php.ini</code> 文件下在把 <code>variables_order = “GPCS”</code> 在G的前面加上E，变成EGPCS</p>
<p><a href="https://mojuchen.github.io/post/7661.html" target="_blank" rel="noopener">参考链接（待补）</a></p>
<p><strong>不加载.env文件的内容</strong></p>
<p>修改框架下的 <code>thinkphp\base.php</code></p>
<p>在 <code>putenv(&quot;$name=$val&quot;);</code> 下面加上两行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$_ENV[$name] &#x3D; $val;</span><br><span class="line">$_SERVER[$name] &#x3D;$val;</span><br></pre></td></tr></table></figure>

<p><strong>分组的的配置不加载</strong></p>
<p>修改框架下的 <code>thinkphp\base.php</code></p>
<p>在 <code>putenv(&quot;$item=$v&quot;);</code> 下面加上一行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$_ENV[$item]&#x3D;$v;</span><br></pre></td></tr></table></figure>

<h4 id="前缀与大写"><a href="#前缀与大写" class="headerlink" title="前缀与大写"></a>前缀与大写</h4><p>默认添加 <code>PHP_</code> 作为前缀，并变为大写，例如：</p>
<p>.env中是 <code>email=moreant@qq.com</code> ，在$_ENV中的key就为PHP_EMAIL。</p>
<h4 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">[database]</span><br><span class="line">hostname=localhost</span><br><span class="line">username=root</span><br><span class="line">password=root</span><br><span class="line">等价于：</span><br><span class="line">database_hostname=localhost</span><br><span class="line">database_username=root</span><br><span class="line">database_password=root</span><br></pre></td></tr></table></figure>

<h4 id="Env类的使用"><a href="#Env类的使用" class="headerlink" title="Env类的使用"></a>Env类的使用</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//或缺email的值，如果不存在email则返回NULL，不会产生错误信息</span></span><br><span class="line">Env::get(<span class="string">'email'</span>);</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line">$_ENV[<span class="string">'PHP_EMAIL'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回组内的某个值</span></span><br><span class="line"> Env::get(<span class="string">'database.username'</span>);</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line">Env::get(<span class="string">'database_username'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以传入第二个参数来指定默认值</span></span><br><span class="line">Env::get(<span class="string">'email'</span>,<span class="string">'morean@qq.com'</span>);</span><br></pre></td></tr></table></figure>

<h2 id="URL和路由"><a href="#URL和路由" class="headerlink" title="URL和路由"></a>URL和路由</h2><h3 id="入口文件"><a href="#入口文件" class="headerlink" title="入口文件"></a>入口文件</h3><p>应用入口文件一般指的是 <code>public\index.php</code> 这个文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//默认是</span></span><br><span class="line"><span class="comment">// 定义应用目录</span></span><br><span class="line">define(<span class="string">'APP_PATH'</span>, <span class="keyword">__DIR__</span> . <span class="string">'/../application/'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载框架引导文件</span></span><br><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/../thinkphp/start.php'</span>;</span><br><span class="line"></span><br><span class="line">----------------------</span><br><span class="line">    </span><br><span class="line"><span class="comment">//一般设置为</span></span><br><span class="line"><span class="comment">// 定义应用目录</span></span><br><span class="line">define(<span class="string">'APP_PATH'</span>, <span class="keyword">__DIR__</span> . <span class="string">'/../app/'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义配置文件目录</span></span><br><span class="line">define(<span class="string">'CONF_PATH'</span>,<span class="keyword">__DIR__</span>.<span class="string">'/../conf/'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载框架引导文件</span></span><br><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/../thinkphp/start.php'</span>;</span><br></pre></td></tr></table></figure>

<p>更多 <strong>define \</strong> 配置可以参考 thinkphp\base.php 的12-31行的 *<em>defined*</em></p>
<p>除非有bug，否则<strong>不要修改thinkphp文件夹下的文件</strong></p>
<h4 id="隐藏入口文件"><a href="#隐藏入口文件" class="headerlink" title="隐藏入口文件"></a>隐藏入口文件</h4><p>隐藏入口文件让url看起来更好看 对seo优化有好处</p>
<p>开启后支持将<code>index.php/admin/index/index</code>改写为<code>admin/index/index</code></p>
<p><strong>操作步骤</strong></p>
<ol>
<li><p>启动 <strong>rewrite</strong> 模块：</p>
<p>打开 <strong>apache</strong> 的 <em>httpd.conf</em> ，搜索：</p>
<p><code>LoadModule rewrite_module modules/mod_rewrite.so</code></p>
<p>将前的 <code>#</code> 去掉。</p>
</li>
<li><p><a href="https://baike.baidu.com/item/allowoverride/4460060?fr=aladdin" target="_blank" rel="noopener">启动读取重写信息</a>：</p>
<p>打开 <strong>apache</strong> 的 <em>httpd-vhosts.conf</em> ，把站点配置信息中的 <code>AllowOverride None</code></p>
<p>改为</p>
<p><code>AllowOverride All</code></p>
</li>
<li><p>重启 <em>apache</em></p>
</li>
</ol>
<p>ps:我的 WampServer 默认已经启动了上面的模块。</p>
<h3 id="入口文件的绑定"><a href="#入口文件的绑定" class="headerlink" title="入口文件的绑定"></a>入口文件的绑定</h3><p>在入口文件（<em>index.php</em>）中添加</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">define(<span class="string">'BIND_MODULE'</span>,<span class="string">'admin/index/conf'</span>);</span><br></pre></td></tr></table></figure>

<p>打开<code>public\index.php</code>就会直接进入admin模块下的index文件的conf方法</p>
<h4 id="自动绑定"><a href="#自动绑定" class="headerlink" title="自动绑定"></a>自动绑定</h4><p>打开自动绑定模块，在配置中添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">auto_bind_module &#x3D;&gt; ture</span><br></pre></td></tr></table></figure>

<p>会自动访问与php文件名相同的模块，例如 <strong>api.php</strong> 会自动访问 <strong>api</strong> 模块</p>
<h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>路由的作用是简化URL访问地址，并根据定义的路由类型做出正确的解析。</p>
<h4 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 是否开启路由</span></span><br><span class="line"><span class="string">'url_route_on'</span>           =&gt; <span class="keyword">true</span>,</span><br><span class="line"><span class="comment">// 路由配置文件（支持配置多个）</span></span><br><span class="line"><span class="string">'route_config_file'</span>      =&gt; [<span class="string">'route'</span>],</span><br><span class="line"><span class="comment">// 路由使用完整匹配</span></span><br><span class="line"><span class="string">'route_complete_match'</span>   =&gt; <span class="keyword">false</span>,</span><br><span class="line"><span class="comment">// 是否强制使用路由</span></span><br><span class="line"><span class="string">'url_route_must'</span>         =&gt; <span class="keyword">false</span>,</span><br></pre></td></tr></table></figure>

<p>在 <code>conf/</code> 下创建 <em>route.php</em> 文件，内容如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    return[</span><br><span class="line">    &#39;news&#x2F;&#39; &#x3D;&gt; &#39;index&#x2F;index&#x2F;index&#39;</span><br><span class="line">    &#39;news&#x2F;:id&#39; &#x3D;&gt; &#39;index&#x2F;index&#x2F;info&#39;</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<p>访问：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;news</span><br></pre></td></tr></table></figure>

<p>会自动路由到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;index&#x2F;index&#x2F;index</span><br></pre></td></tr></table></figure>

<p>访问：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;news&#x2F;4</span><br></pre></td></tr></table></figure>

<p>会自动路由到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;index&#x2F;index&#x2F;info&#x2F;5</span><br></pre></td></tr></table></figure>

<p><strong>且禁止直接访问</strong></p>
<h2 id="请求和响应"><a href="#请求和响应" class="headerlink" title="请求和响应"></a>请求和响应</h2><p>接受和处理所有的请求</p>
<h3 id="对象获取"><a href="#对象获取" class="headerlink" title="对象获取"></a>对象获取</h3><p>有三个方法可以获得请求对象：</p>
<p><strong>助手函数</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$request &#x3D; request();</span><br></pre></td></tr></table></figure>

<p><strong>Request类</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//先 ues Request 类</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Request</span>;</span><br><span class="line"></span><br><span class="line">$request = Request::instance();</span><br></pre></td></tr></table></figure>

<p><strong>传参</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//先 ues Request 类</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Request</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span> <span class="params">(Request $request)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="参数获取"><a href="#参数获取" class="headerlink" title="参数获取"></a>参数获取</h3><p>例如文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">app\index\controller\index.php</span><br></pre></td></tr></table></figure>

<p>访问URL</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//localhost/index/index/index/type/5.html?id=10</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">index</span>\<span class="title">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Request</span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">(Request $request)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//获取URL的值</span></span><br><span class="line">        <span class="comment">//域名  http://localhost</span></span><br><span class="line">        dump($request-&gt;domain());</span><br><span class="line">        <span class="comment">//路径  index/index/index/type/5.html</span></span><br><span class="line">        dump($request-&gt;pathinfo());</span><br><span class="line">        <span class="comment">//不带html的路径</span></span><br><span class="line">        dump($request-&gt;path());</span><br><span class="line">        <span class="comment">//请求类型 GET</span></span><br><span class="line">        dump($request-&gt;method());</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//望文生义 返回类型为Boolean</span></span><br><span class="line">        dump($request-&gt;isGet());</span><br><span class="line">        dump($request-&gt;isPOST());</span><br><span class="line">        dump($request-&gt;isAjax());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//5.0之后分path中的值不属于get</span></span><br><span class="line">        <span class="comment">//get的值  10</span></span><br><span class="line">        dump($request-&gt;get());</span><br><span class="line">        <span class="comment">//get和path的值 10,5</span></span><br><span class="line">    	dump($request-&gt;param());</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//望文生义 返回类型为array</span></span><br><span class="line">        dump($request-&gt;post());</span><br><span class="line">        dump($request-&gt;session());</span><br><span class="line">        dump($request-&gt;cookie());</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//直接获得某项的值</span></span><br><span class="line">        dump($request-&gt;param(<span class="string">'id'</span>));</span><br><span class="line">        dump($request-&gt;cookie(<span class="string">'email'</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//望文生义</span></span><br><span class="line">        dump($request-&gt;module());</span><br><span class="line">        dump($request-&gt;controller());</span><br><span class="line">        <span class="comment">//操作  index</span></span><br><span class="line">        dump($request-&gt;action());</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="input函数"><a href="#input函数" class="headerlink" title="input函数"></a>input函数</h3><h3 id="响应对象"><a href="#响应对象" class="headerlink" title="响应对象"></a>响应对象</h3>]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>笔记</tag>
        <tag>PHP</tag>
        <tag>ThinkPHP</tag>
      </tags>
  </entry>
</search>
